group = error_type, color = error_type)) +
#geom_point(inherit.aes = F, data = df_circle_high_variance,
#            mapping = aes(x=x, y=y), shape = 1, color =  "#002241", size = 70) +
#geom_point(inherit.aes = F, data = df_circle_high_bias,
#              mapping = aes(x=x, y=y), shape = 1, color =  "#002241",  size = 70) +
geom_line(size = 1) +
geom_hline(yintercept = 0.3, color = "#002241", linetype = "dashed")  +
geom_text(inherit.aes = F, data = df_text,
mapping=aes(x=x, y=y, label=label),
size=6, color="#002241", parse=T) +
scale_y_continuous(name = 'Mean Squared Error', breaks = 0.3, labels = expression(epsilon)) +
scale_x_continuous(name = "Sample Size", labels = NULL) +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_blank(),
axis.text.y = element_text(size = 20))
#save plot
ggsave(filename = "images/plot_high_variance.png", plot = plot_high_variance, width = 10, height = 6, dpi = 1000)
plot_high_bias <- ggplot(data = df_high_bias_curves,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#data aesthetics
geom_line(size = 1) +
geom_hline(yintercept = 0.3, color = "#002241", linetype = "dashed")  +
geom_text(inherit.aes = F, data = df_text,
mapping=aes(x=x, y=y, label=label),
size=6, color="#002241", parse=T) +
#scale aesthetics
scale_y_continuous(name = 'Mean Squared Error', breaks = 0.3, labels = expression(epsilon)) +
scale_x_continuous(name = "Sample Size", labels = NULL) +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_blank(),
axis.text.y = element_text(size = 20))
#save plot
ggsave(filename = "images/plot_high_bias.png", plot = plot_high_bias, width = 10, height = 6, dpi = 300)
#text dataframe
df_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42))
df_emp_gen_error_curve_long$problem <- factor(
x = df_emp_gen_error_curve_long$problem,
labels = c("bold(A:~CDF~(Fast~Response~Rate))", "bold(B:~CDF~(Slow~Response~Rate))"))
#high variance plot
plot_high_variance <- ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#data aesthetics
geom_line(size = 1) +
geom_hline(yintercept = 0.3, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
facet_wrap(facets =  ~ problem, nrow = 2, ncol = 1, labeller = label_parsed)
#high variance plot
plot_high_variance <- ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#data aesthetics
geom_line(size = 1) +
geom_hline(yintercept = 0.3, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
facet_wrap(facets =  ~ problem, nrow = 2, ncol = 1, labeller = label_parsed) +
#scale aesthetics
scale_y_continuous(name = 'Mean Squared Error', breaks = 0.3, labels = expression(epsilon)) +
scale_x_continuous(name = "Sample Size", labels = NULL) +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_blank(),
axis.text.y = element_text(size = 20))
#high variance plot
plot_bias_var_rules <- ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#data aesthetics
geom_line(size = 1) +
geom_hline(yintercept = 0.3, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
facet_wrap(facets =  ~ problem, nrow = 2, ncol = 1, labeller = label_parsed) +
#scale aesthetics
scale_y_continuous(name = 'Mean Squared Error', breaks = 0.3, labels = expression(epsilon)) +
scale_x_continuous(name = "Sample Size", labels = NULL) +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_blank(),
axis.text.y = element_text(size = 20))
#save plot
ggsave(filename = "images/plot_bias_var_rules.png", plot = plot_bias_var_rules, width = 10, height = 6, dpi = 300)
#save plot
ggsave(filename = "images/plot_bias_var_rules.png", plot = plot_bias_var_rules, width = 8, height = 6, dpi = 300)
#save plot
ggsave(filename = "images/plot_bias_var_rules.png", plot = plot_bias_var_rules, width = 10, height = 12, dpi = 300)
#high variance plot
plot_bias_var_rules <- ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#data aesthetics
geom_line(size = 1) +
geom_hline(yintercept = 0.3, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
facet_wrap(facets =  ~ problem, nrow = 2, ncol = 1, labeller = label_parsed) +
#scale aesthetics
scale_y_continuous(name = 'Mean Squared Error', breaks = 0.3, labels = expression(epsilon)) +
scale_x_continuous(name = "Sample Size", labels = NULL) +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_blank(),
axis.text.y = element_text(size = 20),
strip.background = element_rect(fill = "white", color = "white"))
#save plot
ggsave(filename = "images/plot_bias_var_rules.png", plot = plot_bias_var_rules, width = 10, height = 12, dpi = 300)
#high variance plot
plot_bias_var_rules <- ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#data aesthetics
geom_line(size = 1) +
geom_hline(yintercept = 0.3, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
facet_wrap(facets =  ~ problem, nrow = 2, ncol = 1, labeller = label_parsed) +
#scale aesthetics
scale_y_continuous(name = 'Mean Squared Error', breaks = 0.3, labels = expression(epsilon)) +
scale_x_continuous(name = "Sample Size", labels = NULL) +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_blank(),
axis.text.y = element_text(size = 20),
strip.text = element_text(size = 20),
strip.background = element_rect(fill = "white", color = "white"))
#save plot
ggsave(filename = "images/plot_bias_var_rules.png", plot = plot_bias_var_rules, width = 10, height = 12, dpi = 300)
#import Python data set
df_emp_gen_error_curve_long <- py$df_emp_gen_error_curve_long
df_emp_gen_error_curve_long$problem <- factor(
x = df_emp_gen_error_curve_long$problem,
labels = c("bold(A:~Pattern~of~Results~Caused~by~High~Variance~(Overfitting))",
"bold(B:~CPattern~of~Results~Caused~by~High~Bias~(Underfitting))"))
#text dataframe
df_text_high_var = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Variance\\phantom{.}(Overfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$data", output = "character"),
TeX(input = "$\\downarrow$complexity", output = "character"),
TeX(input = "$\\uparrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42))
#text dataframe
df_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42))
color_palette <-c('gen_error' = '#002241',
'emp_loss' ='#9ECAE1')
#high variance plot
plot_bias_var_rules <- ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#data aesthetics
geom_line(size = 1) +
geom_hline(yintercept = 0.3, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
facet_wrap(facets =  ~ problem, nrow = 2, ncol = 1, labeller = label_parsed) +
#scale aesthetics
scale_y_continuous(name = 'Mean Squared Error', breaks = 0.3, labels = expression(epsilon)) +
scale_x_continuous(name = "Sample Size", labels = NULL) +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_blank(),
axis.text.y = element_text(size = 20),
strip.text = element_text(size = 15),
strip.background = element_rect(fill = "white", color = "white"))
#save plot
ggsave(filename = "images/plot_bias_var_rules.png", plot = plot_bias_var_rules, width = 10, height = 12, dpi = 300)
#import Python data set
df_emp_gen_error_curve_long <- py$df_emp_gen_error_curve_long
df_emp_gen_error_curve_long$problem <- factor(
x = df_emp_gen_error_curve_long$problem,
labels = c("bold(A:~Pattern~of~Results~Caused~by~High~Variance~(Overfitting))",
"bold(B:~Pattern~of~Results~Caused~by~High~Bias~(Underfitting))"))
#text dataframe
df_text_high_var = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Variance\\phantom{.}(Overfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$data", output = "character"),
TeX(input = "$\\downarrow$complexity", output = "character"),
TeX(input = "$\\uparrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42))
#text dataframe
df_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42))
color_palette <-c('gen_error' = '#002241',
'emp_loss' ='#9ECAE1')
#high variance plot
plot_bias_var_rules <- ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#data aesthetics
geom_line(size = 1) +
geom_hline(yintercept = 0.3, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
facet_wrap(facets =  ~ problem, nrow = 2, ncol = 1, labeller = label_parsed) +
#scale aesthetics
scale_y_continuous(name = 'Mean Squared Error', breaks = 0.3, labels = expression(epsilon)) +
scale_x_continuous(name = "Sample Size", labels = NULL) +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_blank(),
axis.text.y = element_text(size = 20),
strip.text = element_text(size = 15),
strip.background = element_rect(fill = "white", color = "white"))
#save plot
ggsave(filename = "images/plot_bias_var_rules.png", plot = plot_bias_var_rules, width = 10, height = 12, dpi = 300)
#text dataframe
df_text_high_var = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Variance\\phantom{.}(Overfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$data", output = "character"),
TeX(input = "$\\downarrow$complexity", output = "character"),
TeX(input = "$\\uparrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" = "bold(A:~Error~Patterns~Caused~by~High~Variance~(Overfitting))")
#text dataframe
df_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" =  "bold(B:~Error~Patterns~Caused~by~High~Bias~(Underfitting))")
df_text_merged <- rbind(df_text_high_var, df_text_high_bias)
df_text_merged
class(df_text_merged$problem)
#text dataframe
df_text_high_var = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Variance\\phantom{.}(Overfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$data", output = "character"),
TeX(input = "$\\downarrow$complexity", output = "character"),
TeX(input = "$\\uparrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" = factor("bold(A:~Error~Patterns~Caused~by~High~Variance~(Overfitting))"))
#text dataframe
df_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" =  factor("bold(B:~Error~Patterns~Caused~by~High~Bias~(Underfitting))"))
df_text_merged <- rbind(df_text_high_var, df_text_high_bias)
#text dataframe
df_text_high_var = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Variance\\phantom{.}(Overfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$data", output = "character"),
TeX(input = "$\\downarrow$complexity", output = "character"),
TeX(input = "$\\uparrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" = factor("bold(A:~Error~Patterns~Caused~by~High~Variance~(Overfitting))"))
#text dataframe
df_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" =  factor("bold(B:~Error~Patterns~Caused~by~High~Bias~(Underfitting))"))
df_text_merged <- rbind(df_text_high_var, df_text_high_bias)
#text dataframe
df_text_high_var = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Variance\\phantom{.}(Overfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$data", output = "character"),
TeX(input = "$\\downarrow$complexity", output = "character"),
TeX(input = "$\\uparrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" = "bold(A:~Error~Patterns~Caused~by~High~Variance~(Overfitting))")
#text dataframe
df_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" =  "bold(B:~Error~Patterns~Caused~by~High~Bias~(Underfitting))")
#text dataframe
df_text_high_var = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Variance\\phantom{.}(Overfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$data", output = "character"),
TeX(input = "$\\downarrow$complexity", output = "character"),
TeX(input = "$\\uparrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" = "bold(A:~Error~Patterns~Caused~by~High~Variance~(Overfitting))")
#text dataframe
df_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" = "bold(B:~Error~Patterns~Caused~by~High~Bias~(Underfitting))")
df_text_high_var = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Variance\\phantom{.}(Overfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$data", output = "character"),
TeX(input = "$\\downarrow$complexity", output = "character"),
TeX(input = "$\\uparrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" = "bold(A:~Error~Patterns~Caused~by~High~Variance~(Overfitting))")
#text dataframe
df_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" =  "bold(B:~Error~Patterns~Caused~by~High~Bias~(Underfitting))")
df_text_merged <- rbind(df_text_high_var, df_text_high_bias)
#text dataframe
df_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42))
#text dataframe
df_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115))
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'ggforce', 'latex2exp', 'ggbrace')
libraries(packages)
knitr::opts_chunk$set(comment = NA, echo = TRUE, eval = TRUE, warning = FALSE)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#create and use conda environment
#conda_create(envname = 'blog_posts',  python_version = '3.10.11')
use_condaenv(condaenv = 'blog_posts')
#install packages in conda environment
py_packages <- c('numpy', 'pandas', 'scikit-learn', "plotnine", "statsmodels")
#conda_install(envname = 'blog_posts', packages = "trun_mvnt")
#install_tensorflow(method = 'conda', envname = 'blog_posts')#can take long time (~10 minutes)
#useful for checking what packages are loaded
#py_list_packages(envname = 'blog_posts', type = 'conda')
#pandoc content/coding_tricks/em_demo/refs.bib -t csljson -o content/coding_tricks/em_demo/refs.json
reticulate::repl_python()
#import Python data set
df_emp_gen_error_curve_long <- py$df_emp_gen_error_curve_long
reticulate::repl_python()
