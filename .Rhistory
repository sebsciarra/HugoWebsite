breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 500, by = 1)
M <- 0.5
satiation_value <- 0.5
satiation_point_gen_error <- 300
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- M*(1 - exp(-a_gen_error*training_sample_size))
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(cdf_data, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 1000, by = 1)
M <- 0.5
satiation_value <- 0.5
satiation_point_gen_error <- 300
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- M*(1 - exp(-a_gen_error*training_sample_size))
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 1000, by = 1)
M <- 0.5
satiation_value <- 0.5
satiation_point_gen_error <- 200
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- M*(1 - exp(-a_gen_error*training_sample_size))
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
satiation_point_gen_error <- 150
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 1000, by = 1)
M <- 0.5
satiation_value <- 0.5
satiation_point_gen_error <- 150
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- M*(1 - exp(-a_gen_error*training_sample_size))
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#curve generalization error
curve_gen_error <- fast <- -M*(1 - exp(-a_gen_error*training_sample_size))
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 1000, by = 1)
M <- 0.5
satiation_value <- 0.5
satiation_point_gen_error <- 150
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- -M*(1 - exp(-a_gen_error*training_sample_size))
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
curve_gen_error
#curve generalization error
curve_gen_error <- -M*(1 - exp(-a_gen_error*training_sample_size))
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
curve_gen_error
ggplot(data_emp_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#curve generalization error
curve_gen_error <- -M*(1 - exp(-a_gen_error*training_sample_size)) + 1
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_emp_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss")
satiation_value_gen_error <- 0.5
satiation_point_gen_error <- 150
satiation_value_emp_loss <- 0.48
satiation_point_emp_loss <- 200
a_gen_error <- log(1 - satiation_value_gen_error)/-satiation_point_gen_error
a_emp_loss <- log(1 - satiation_value_emp_loss)/-satiation_point_emp_loss
#curve generalization error
curve_gen_error <- -M*(1 - exp(-a_gen_error*training_sample_size)) + 1
curve_emp_loss <- -M*(1 - exp(-a_emp_loss*training_sample_size)) +
curve_emp_loss <- -M*(1 - exp(-a_emp_loss*training_sample_size)) + 1
curve_emp_loss <- -M*(1 - exp(-a_emp_loss*training_sample_size)) + 1
?pivot_longer
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function', values_to = 'error_value')
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = c("gen_error", "emp_loss"), names_to = 'function', values_to = 'error_value')
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'gen_error' = curve_gen_error,
'emp_loss' = curve_emp_loss)
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = c("gen_error", "emp_loss"), names_to = 'function', values_to = 'error_value')
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function', values_to = 'error_value')
data_emp_gen_error_curve_long
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function', values_to = 'error_value',
names_transform = factor())
data_emp_gen_error_curve_long
names_transform = factor
)
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function', values_to = 'error_value',
names_transform = factor)
data_emp_gen_error_curve_long
curve generalization error
#
#curve generalization error
curve_gen_error <- -M*(1 - exp(-a_gen_error*training_sample_size)) + 1
curve_emp_loss <- M*(1 - exp(-a_emp_loss*training_sample_size)) + 1
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'gen_error' = curve_gen_error,
'emp_loss' = curve_emp_loss)
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function', values_to = 'error_value',
names_transform = factor)
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = 'function', color = 'function')) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
group = 'function') +
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = 'function')) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
data_emp_gen_error_curve_long
curve_emp_loss <- M*(1 - exp(-a_emp_loss*training_sample_size))
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'gen_error' = curve_gen_error,
'emp_loss' = curve_emp_loss)
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function_type', values_to = 'error_value',
names_transform = factor)
data_emp_gen_error_curve_long
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = 'function')) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = 'function_type')) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
data_emp_gen_error_curve_long
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 1000, by = 1)
M <- 0.5
satiation_value_gen_error <- 0.5
satiation_point_gen_error <- 250
satiation_value_emp_loss <- 0.495
satiation_point_emp_loss <- 150
a_gen_error <- log(1 - satiation_value_gen_error)/-satiation_point_gen_error
a_emp_loss <- log(1 - satiation_value_emp_loss)/-satiation_point_emp_loss
#curve generalization error
curve_gen_error <- -M*(1 - exp(-a_gen_error*training_sample_size)) + 1
curve_emp_loss <- M*(1 - exp(-a_emp_loss*training_sample_size))
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'gen_error' = curve_gen_error,
'emp_loss' = curve_emp_loss)
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function_type', values_to = 'error_value',
names_transform = factor)
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40)
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
pt.scale_color_manual(values = color_palette,
labels = c('emp_loss': 'Empirical Loss', 'gen_error': 'Generalization Error')) +
theme_classic(base_family = 'Helvetica')
color_palette = data.frame('gen_error' = '#002241',
'emp_loss' = '#9ECAE1')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
scale_color_manual(values = color_palette,
labels = c('emp_loss': 'Empirical Loss', 'gen_error': 'Generalization Error')) +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
scale_color_manual(values = color_palette,
labels = c('emp_loss' = 'Empirical Loss', 'gen_error' = 'Generalization Error')) +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type, color = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
scale_color_manual(values = color_palette,
labels = c('emp_loss' = 'Empirical Loss', 'gen_error' = 'Generalization Error')) +
theme_classic(base_family = 'Helvetica')
reticulate::repl_python()
plot_bias_var_rules
reticulate::repl_python()
#import Python data set
df_emp_gen_error_curve_long <- py$df_emp_gen_error_curve_long
#data sets for plot
# Add a circle on top of the ggplot object at x=3, y=0.5 with a white interior
df_circle_high_variance = data.frame('x' = 130, 'y' = 0.3)
df_circle_high_bias = data.frame('x' = 830, 'y' = 0.42)
#text dataframe
df_text = data.frame("label" = c(TeX(input = "$\\textbf{Case} \\phantom{.} \\textbf{1}$", output = "character"),
TeX(input = "$\\uparrow$Bias", output = "character"),
TeX(input = "$\\textbf{Case} \\phantom{.} \\textbf{2}$", output = "character"),
TeX(input = "$\\uparrow$Variance", output = "character")),
"x" = c(60, 47, 800, 825),
"y" = c(0.35, 0.28, 0.35, 0.28))
color_palette <-c('gen_error' = '#002241',
'emp_loss' ='#9ECAE1')
#import python data sets
plot_bias_var_rules <- ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
geom_point(inherit.aes = F, data = df_circle_high_variance,
mapping = aes(x=x, y=y), shape = 1, color =  "#002241", size = 70) +
geom_point(inherit.aes = F, data = df_circle_high_bias,
mapping = aes(x=x, y=y), shape = 1, color =  "#002241",  size = 70) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40, color = "#002241", linetype = "dashed")  +
geom_text(inherit.aes = F, data = df_text,
mapping=aes(x=x, y=y, label=label),
size=6, color="#002241", parse=T) +
scale_y_continuous(name = 'Mean Squared Error')+
scale_x_continuous(name = "Sample Size for Empirical Loss")  +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
ggsave(filename = "images/plot_bias_var_rules.png", plot = plot_bias_var_rules, width = 10, height = 6, dpi = 1000)
plot_bias_var_rules
#import python data sets
plot_bias_var_rules <- ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#geom_point(inherit.aes = F, data = df_circle_high_variance,
#            mapping = aes(x=x, y=y), shape = 1, color =  "#002241", size = 70) +
#geom_point(inherit.aes = F, data = df_circle_high_bias,
#              mapping = aes(x=x, y=y), shape = 1, color =  "#002241",  size = 70) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
scale_y_continuous(name = 'Mean Squared Error')+
scale_x_continuous(name = "Sample Size for Empirical Loss")  +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
#import python data sets
ploggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#geom_point(inherit.aes = F, data = df_circle_high_variance,
#            mapping = aes(x=x, y=y), shape = 1, color =  "#002241", size = 70) +
#geom_point(inherit.aes = F, data = df_circle_high_bias,
#              mapping = aes(x=x, y=y), shape = 1, color =  "#002241",  size = 70) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
scale_y_continuous(name = 'Mean Squared Error')+
scale_x_continuous(name = "Sample Size for Empirical Loss")  +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
#import python data sets
ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#geom_point(inherit.aes = F, data = df_circle_high_variance,
#            mapping = aes(x=x, y=y), shape = 1, color =  "#002241", size = 70) +
#geom_point(inherit.aes = F, data = df_circle_high_bias,
#              mapping = aes(x=x, y=y), shape = 1, color =  "#002241",  size = 70) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
scale_y_continuous(name = 'Mean Squared Error')+
scale_x_continuous(name = "Sample Size for Empirical Loss")  +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
reticulate::repl_python()
#import Python data set
df_emp_gen_error_curve_long <- py$df_emp_gen_error_curve_long
#data sets for plot
# Add a circle on top of the ggplot object at x=3, y=0.5 with a white interior
df_circle_high_variance = data.frame('x' = 130, 'y' = 0.3)
df_circle_high_bias = data.frame('x' = 830, 'y' = 0.42)
#text dataframe
df_text = data.frame("label" = c(TeX(input = "$\\textbf{Case} \\phantom{.} \\textbf{1}$", output = "character"),
TeX(input = "$\\uparrow$Bias", output = "character"),
TeX(input = "$\\textbf{Case} \\phantom{.} \\textbf{2}$", output = "character"),
TeX(input = "$\\uparrow$Variance", output = "character")),
"x" = c(60, 47, 800, 825),
"y" = c(0.35, 0.28, 0.35, 0.28))
color_palette <-c('gen_error' = '#002241',
'emp_loss' ='#9ECAE1')
#import python data sets
ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#geom_point(inherit.aes = F, data = df_circle_high_variance,
#            mapping = aes(x=x, y=y), shape = 1, color =  "#002241", size = 70) +
#geom_point(inherit.aes = F, data = df_circle_high_bias,
#              mapping = aes(x=x, y=y), shape = 1, color =  "#002241",  size = 70) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
scale_y_continuous(name = 'Mean Squared Error')+
scale_x_continuous(name = "Sample Size for Empirical Loss")  +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
ggsave(filename = "images/plot_bias_var_rules.png", plot = plot_bias_var_rules, width = 10, height = 6, dpi = 1000)
reticulate::repl_python()
df_emp_gen_error_curve_long <- py$df_emp_gen_error_curve_long
#data sets for plot
# Add a circle on top of the ggplot object at x=3, y=0.5 with a white interior
df_circle_high_variance = data.frame('x' = 130, 'y' = 0.3)
df_circle_high_bias = data.frame('x' = 830, 'y' = 0.42)
#text dataframe
df_text = data.frame("label" = c(TeX(input = "$\\textbf{Case} \\phantom{.} \\textbf{1}$", output = "character"),
TeX(input = "$\\uparrow$Bias", output = "character"),
TeX(input = "$\\textbf{Case} \\phantom{.} \\textbf{2}$", output = "character"),
TeX(input = "$\\uparrow$Variance", output = "character")),
"x" = c(60, 47, 800, 825),
"y" = c(0.35, 0.28, 0.35, 0.28))
color_palette <-c('gen_error' = '#002241',
'emp_loss' ='#9ECAE1')
#import python data sets
ggplot(data = df_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#geom_point(inherit.aes = F, data = df_circle_high_variance,
#            mapping = aes(x=x, y=y), shape = 1, color =  "#002241", size = 70) +
#geom_point(inherit.aes = F, data = df_circle_high_bias,
#              mapping = aes(x=x, y=y), shape = 1, color =  "#002241",  size = 70) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40, color = "#002241", linetype = "dashed")  +
#geom_text(inherit.aes = F, data = df_text,
#          mapping=aes(x=x, y=y, label=label),
#           size=6, color="#002241", parse=T) +
scale_y_continuous(name = 'Mean Squared Error')+
scale_x_continuous(name = "Sample Size for Empirical Loss")  +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
reticulate::repl_python()
