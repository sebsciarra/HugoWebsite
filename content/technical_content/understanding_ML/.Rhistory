axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),,
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
ggsave(plot = app_error_plot, filename = 'images/app_error_plot.png', width = 12, height = 6, dpi = 1000)
est_error_plot <- ggplot(data = df_est_error_long, mapping = aes(x = sample_size, y = gen_error,
group = function_type,
color = function_type)) +
geom_line(linewidth = 1.2) +
scale_color_manual(name = "Function Type", values = line_color, labels = labels)  +
labs(x = "Sample Size for Obtaining Sample Risk Minimizer", y = "Generalization Error (Mean Squared Error)",
color = "Function Type") +
facet_zoom(ylim = c(0.23, .236),  zoom.size = 1.2, zoom.data = zoom)  +
#estimation error brace
geom_brace(inherit.aes = F, data = data_brace_est_error,
mapping = aes(x = x, y = y,  label=TeX(label_est_error, output="character")),
color = '#002241', labelsize = 6, rotate = 270, labeldistance = 5,
parse=T) +
theme_classic(base_family = "Helvetica") +
theme(legend.text.align = 0, #left align text
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.position = 'bottom',
legend.direction = 'vertical',
legend.justification = 'left',
legend.margin = margin(t = 1, unit = "cm"),
axis.title  = element_text(size = 18),
axis.text = element_text(size = 15, color = "#002241"),
text = element_text(color = "#002241"),,
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
ggsave(plot = est_error_plot, filename = 'images/est_error_plot1.png', width = 12, height = 9, dpi = 1000)
reticulate::repl_python()
df_est_error <- read_csv(file = "data/est_error.csv")
df_est_error <- py$df_est_error
#create long version of df_est_error where function (bayes, constrained minimizer, or sample minimizer) is a
#categorical variable
df_est_error["bayes_risk"] <- py$bayes_risk
df_est_error["constr_min"] <- py$constrained_erm$gen_error
df_est_error_long <- df_est_error %>%
pivot_longer(cols = "sample_risk_gen_error":"constr_min", names_to = "function_type", values_to = "gen_error",
names_ptypes = factor())
df_est_error_long$function_type <- factor(x = df_est_error_long$function_type,
levels = c("sample_risk_gen_error", "constr_min", "bayes_risk"))
labels <- c(TeX('Sample risk minimizer, $\\hat{f}_s$'),
TeX('Constrained risk minimizer, $f_\u2131$'),
TeX('Bayes decision function, $f^*$'))
line_color <-  setNames(c("blue", "#2171B5", "#9ECAE1"), levels(df_est_error_long$function_type))
#create data set for braces that show estimation and approximation error.
##see https://stackoverflow.com/questions/45221783/ggforce-facet-zoom-labels-only-on-zoomed-example
brace_x_start <- which.min(df_est_error$sample_risk_gen_error[1:900]) #find minimum value in first 250 values
brace_x_end <- brace_x_start -50
data_brace_est_error <- data.frame("x" = c(brace_x_start, brace_x_end),
"y" = c(df_est_error$sample_risk_gen_error[brace_x_start],
py$constrained_erm$gen_error),
"zoom" = T)
label_est_error <- "Estimation error, $\\epsilon_{est}$"
est_error_plot <- ggplot(data = df_est_error_long, mapping = aes(x = sample_size, y = gen_error,
group = function_type,
color = function_type)) +
geom_line(linewidth = 1.2) +
scale_color_manual(name = "Function Type", values = line_color, labels = labels)  +
labs(x = "Sample Size for Obtaining Sample Risk Minimizer", y = "Generalization Error (Mean Squared Error)",
color = "Function Type") +
facet_zoom(ylim = c(0.23, .236),  zoom.size = 1.2, zoom.data = zoom)  +
#estimation error brace
geom_brace(inherit.aes = F, data = data_brace_est_error,
mapping = aes(x = x, y = y,  label=TeX(label_est_error, output="character")),
color = '#002241', labelsize = 6, rotate = 270, labeldistance = 5,
parse=T) +
theme_classic(base_family = "Helvetica") +
theme(legend.text.align = 0, #left align text
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.position = 'bottom',
legend.direction = 'vertical',
legend.justification = 'left',
legend.margin = margin(t = 1, unit = "cm"),
axis.title  = element_text(size = 18),
axis.text = element_text(size = 15, color = "#002241"),
text = element_text(color = "#002241"),,
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
ggsave(plot = est_error_plot, filename = 'images/est_error_plot1.png', width = 12, height = 9, dpi = 1000)
ggsave(plot = est_error_plot, filename = 'images/est_error_plot.png', width = 12, height = 9, dpi = 1000)
In looking at Figure \ref{fig:mse-plot}, the best regression weight ($\mathbf{w}_{MSE}$) occurs at the trough of the mean squared error function. In the previous section, the weight value at the trough was solved for analytically by setting the gradient to zero and solving for $\mathbf{w}$ (see Equation \ref{eq:weight-mse-min}). In this section, I will arrive at the trough not through an analytical method, but by descending the mean squared error function in Figure \ref{eq:mse-plot} until the trough is reached. This method of descending a function until a trough is reached is known as *gradient descent*. Using pseudocode, I represent the gradient descent algorithm below in Algorithm <a href="#grad_descent">1</a> below.
app_error_plot <- ggplot(data = df_app_error_long, mapping = aes(x = sample_size, y = gen_error,
group = function_type,
color = function_type)) +
geom_line(linewidth = 1.2) +
scale_color_manual(name = "Function Type", values = line_color, labels = labels)  +
labs(x = "Sample Size for Model Development",
y = "Generalization Error (Mean Squared Error)",
color = "Function Type") +
scale_y_continuous(limits = c(0.22, 0.250)) +
facet_zoom(ylim = c(0.23, .234),  zoom.size = 1.2, zoom.data = zoom)  +
#approximation error brace
geom_brace(inherit.aes = F, data = data_brace_app_error,
mapping = aes(x = x, y = y,  label=TeX(label_app_error, output="character")),
color = '#002241', labelsize = 6, rotate = 90, labeldistance = 5,
parse = T) +
theme_classic(base_family = "Helvetica") +
theme(legend.text.align = 0, #left align text
legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
legend.position = 'bottom',
legend.direction = 'vertical',
legend.justification = 'left',
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),,
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
app_error_plot <- ggplot(data = df_app_error_long, mapping = aes(x = sample_size, y = gen_error,
group = function_type,
color = function_type)) +
geom_line(linewidth = 1.2) +
scale_color_manual(name = "Function Type", values = line_color, labels = labels)  +
labs(x = "Sample Size for Model Development",
y = "Generalization Error (Mean Squared Error)",
color = "Function Type") +
scale_y_continuous(limits = c(0.22, 0.250)) +
facet_zoom(ylim = c(0.23, .234),  zoom.size = 1.2, zoom.data = zoom)  +
#approximation error brace
geom_brace(inherit.aes = F, data = data_brace_app_error,
mapping = aes(x = x, y = y,  label=TeX(label_app_error, output="character")),
color = '#002241', labelsize = 6, rotate = 90, labeldistance = 5,
parse = T) +
theme_classic(base_family = "Helvetica") +
theme(legend.text.align = 0, #left align text
legend.position = 'bottom',
legend.direction = 'vertical',
legend.justification = 'left',
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),,
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
ggsave(plot = app_error_plot, filename = 'images/app_error_plot.png', width = 12, height = 6, dpi = 1000)
est_error_plot <- ggplot(data = df_est_error_long, mapping = aes(x = sample_size, y = gen_error,
group = function_type,
color = function_type)) +
geom_line(linewidth = 1.2) +
scale_color_manual(name = "Function Type", values = line_color, labels = labels)  +
labs(x = "Sample Size for Obtaining Sample Risk Minimizer", y = "Generalization Error (Mean Squared Error)",
color = "Function Type") +
facet_zoom(ylim = c(0.23, .236),  zoom.size = 1.2, zoom.data = zoom)  +
#estimation error brace
geom_brace(inherit.aes = F, data = data_brace_est_error,
mapping = aes(x = x, y = y,  label=TeX(label_est_error, output="character")),
color = '#002241', labelsize = 6, rotate = 270, labeldistance = 5,
parse=T) +
theme_classic(base_family = "Helvetica") +
theme(legend.text.align = 0, #left align text
legend.position = 'bottom',
legend.direction = 'vertical',
legend.justification = 'left',
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.margin = margin(t = 1, unit = "cm"),
axis.title  = element_text(size = 18),
axis.text = element_text(size = 15, color = "#002241"),
text = element_text(color = "#002241"),,
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
ggsave(plot = est_error_plot, filename = 'images/est_error_plot.png', width = 12, height = 9, dpi = 1000)
reticulate::repl_python()
#load in dataset
df_est_error <- py$df_est_error
#create long version of df_est_error where function (bayes, constrained minimizer, or sample minimizer) is a
#categorical variable
df_est_error["bayes_risk"] <- py$bayes_risk
df_est_error["constr_min"] <- py$constrained_erm$gen_error
df_est_error_long <- df_est_error %>%
pivot_longer(cols = "sample_risk_gen_error":"constr_min", names_to = "function_type", values_to = "gen_error",
names_ptypes = factor())
df_est_error_long$function_type <- factor(x = df_est_error_long$function_type,
levels = c("sample_risk_gen_error", "constr_min", "bayes_risk"))
labels <- c(TeX('Sample risk minimizer, $\\hat{f}_s$'),
TeX('Constrained risk minimizer, $f_\u2131$'),
TeX('Bayes decision function, $f^*$'))
line_color <-  setNames(c("blue", "#2171B5", "#9ECAE1"), levels(df_est_error_long$function_type))
#create data set for braces that show estimation and approximation error.
##see https://stackoverflow.com/questions/45221783/ggforce-facet-zoom-labels-only-on-zoomed-example
brace_x_start <- which.min(df_est_error$sample_risk_gen_error[1:900]) #find minimum value in first 250 values
brace_x_end <- brace_x_start -50
data_brace_est_error <- data.frame("x" = c(brace_x_start, brace_x_end),
"y" = c(df_est_error$sample_risk_gen_error[brace_x_start],
py$constrained_erm$gen_error),
"zoom" = T)
label_est_error <- "Estimation error, $\\epsilon_{est}$"
est_error_plot <- ggplot(data = df_est_error_long, mapping = aes(x = sample_size, y = gen_error,
group = function_type,
color = function_type)) +
geom_line(linewidth = 1.2) +
scale_color_manual(name = "Function Type", values = line_color, labels = labels)  +
labs(x = "Sample Size for Obtaining Sample Risk Minimizer", y = "Generalization Error (Mean Squared Error)",
color = "Function Type") +
facet_zoom(ylim = c(0.23, .236),  zoom.size = 1.2, zoom.data = zoom)  +
#estimation error brace
geom_brace(inherit.aes = F, data = data_brace_est_error,
mapping = aes(x = x, y = y,  label=TeX(label_est_error, output="character")),
color = '#002241', labelsize = 6, rotate = 270, labeldistance = 5,
parse=T) +
theme_classic(base_family = "Helvetica") +
theme(legend.text.align = 0, #left align text
legend.position = 'bottom',
legend.direction = 'vertical',
legend.justification = 'left',
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.margin = margin(t = 1, unit = "cm"),
axis.title  = element_text(size = 18),
axis.text = element_text(size = 15, color = "#002241"),
text = element_text(color = "#002241"),,
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
est_error_plot
reticulate::repl_python()
df_opt_error <- py$df_opt_error
#create long version of df_est_error where function (bayes, constrained minimizer, or sample minimizer) is a
#categorical variable
df_est_error["opt_gen_error"] <- df_opt_error$opt_gen_error
df_est_error_long <- df_est_error %>%
pivot_longer(cols = "sample_risk_gen_error":"opt_gen_error", names_to = "function_type", values_to = "gen_error",
names_ptypes = factor())
df_est_error_long$function_type <- factor(x = df_est_error_long$function_type,
levels = c("opt_gen_error", "sample_risk_gen_error", "constr_min",
"bayes_risk"))
labels <- c(TeX('Optimization risk minimizer, $\\tilde{f}_s$'),
TeX('Sample risk minimizer, $\\hat{f}_s$'),
TeX('Constrained risk minimizer, $f_\u2131$'),
TeX('Bayes decision function, $f^*$'))
line_color <-  setNames(c("#002241", "blue", "#2171B5", "#9ECAE1"), levels(df_est_error_long$function_type))
#create data set for braces that show estimation and approximation error.
##see https://stackoverflow.com/questions/45221783/ggforce-facet-zoom-labels-only-on-zoomed-example
##negative optimization error
brace_x_start <- which.min(df_est_error$opt_gen_error[400:500])+400 #find minimum value in first 250 values
brace_x_end <- brace_x_start + 50
data_brace_opt_error <- data.frame("x" = c(brace_x_start, brace_x_end),
"y" = c(df_est_error$opt_gen_error[brace_x_start],
df_est_error$sample_risk_gen_error[brace_x_end]),
"zoom" = T)
label_opt_error <- "Optimization error, $\\epsilon_{opt}$"
opt_error_plot <- ggplot(data = df_est_error_long, mapping = aes(x = sample_size, y = gen_error,
group = function_type,
color = function_type)) +
geom_line(linewidth = 1.2) +
scale_color_manual(name = "Function Type", values = line_color, labels = labels)  +
labs(x = "Sample Size for Obtaining Sample and Optimization Risk Minimizers",
y = "Generalization Error (Mean Squared Error)",
color = "Function Type") +
facet_zoom(ylim = c(0.23, .27),  zoom.size = 1.2, zoom.data = zoom)  +
#optimization error brace for negative optimization error
geom_brace(inherit.aes = F, data = data_brace_opt_error,
mapping = aes(x = x, y = y,  label=TeX(label_opt_error, output="character")),
color = '#002241', labelsize = 6, rotate = 90, labeldistance = 5,
parse=T)  +
theme_classic(base_family = "Helvetica") +
theme(legend.text.align = 0, #left align text
legend.position = 'bottom',
legend.direction = 'vertical',
legend.justification = 'left',
legend.margin = margin(t = 1, unit = "cm"),
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
axis.title  = element_text(size = 18),
axis.text = element_text(size = 15, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
opt_error_plot
ggsave(plot = opt_error_plot, filename = 'images/opt_error_plot2.png', width = 12, height = 9.5)
reticulate::repl_python()
#create long version of data_est_error where function type (bayes or sample minimizer) is
#a categorical variable
data_app_error <- data.frame("sample_size" = 5:1000,
"bayes_risk" =  py$bayes_risk,
"constr_min" = py$constrained_erm$gen_error)
data_app_error_long <- data_app_error %>%
pivot_longer(cols = "bayes_risk":"constr_min", names_to = "function_type", values_to = "gen_error",
names_ptypes = factor())
data_app_error_long$function_type <- factor(x = data_app_error_long$function_type,
levels = c("constr_min", "bayes_risk"))
labels <- c(TeX('Constrained risk minimizer, $f_\u2131$'),
TeX('Bayes decision function, $f^*$'))
line_color <-  setNames(c("#2171B5", "#9ECAE1"), levels(data_app_error_long$function_type))
#create data set for braces that show estimation and approximation error.
##see https://stackoverflow.com/questions/45221783/ggforce-facet-zoom-labels-only-on-zoomed-example
data_brace_app_error <- data.frame("x" = c(250, 300),
"y" = c(py$constrained_erm$gen_error, py$bayes_risk),
"zoom" = T)
label_app_error <- "Approximation error, $\\epsilon_{app}$"
app_error_plot <- ggplot(data = data_app_error_long, mapping = aes(x = sample_size, y = gen_error,
group = function_type,
color = function_type)) +
geom_line(linewidth = 1.2) +
scale_color_manual(name = "Function Type", values = line_color, labels = labels)  +
labs(x = "Sample Size for Model Development",
y = "Generalization Error (Mean Squared Error)",
color = "Function Type") +
scale_y_continuous(limits = c(0.22, 0.250)) +
facet_zoom(ylim = c(0.23, .234),  zoom.size = 1.2, zoom.data = zoom)  +
#approximation error brace
geom_brace(inherit.aes = F, data = data_brace_app_error,
mapping = aes(x = x, y = y,  label=TeX(label_app_error, output="character")),
color = '#002241', labelsize = 6, rotate = 90, labeldistance = 5,
parse = T) +
theme_classic(base_family = "Helvetica") +
theme(legend.text.align = 0, #left align text
legend.position = 'bottom',
legend.direction = 'vertical',
legend.justification = 'left',
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),,
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
app_error_plot
#import data set from Python
data_est_error <- py$data_est_error
reticulate::repl_python()
#import data set from Python
data_est_error <- py$data_est_error
#create long version of data_est_error where function (bayes, constrained minimizer, or sample minimizer) is a
#categorical variable
data_est_error["bayes_risk"] <- py$bayes_risk
data_est_error["constr_min"] <- py$constrained_erm$gen_error
data_est_error_long <- data_est_error %>%
pivot_longer(cols = "sample_risk_gen_error":"constr_min", names_to = "function_type", values_to = "gen_error",
names_ptypes = factor())
data_est_error_long$function_type <- factor(x = data_est_error_long$function_type,
levels = c("sample_risk_gen_error", "constr_min", "bayes_risk"))
labels <- c(TeX('Sample risk minimizer, $\\hat{f}_s$'),
TeX('Constrained risk minimizer, $f_\u2131$'),
TeX('Bayes decision function, $f^*$'))
line_color <-  setNames(c("blue", "#2171B5", "#9ECAE1"), levels(data_est_error_long$function_type))
#create data set for braces that show estimation and approximation error.
##see https://stackoverflow.com/questions/45221783/ggforce-facet-zoom-labels-only-on-zoomed-example
brace_x_start <- which.min(data_est_error$sample_risk_gen_error[1:900]) #find minimum value in first 250 values
brace_x_end <- brace_x_start -50
data_brace_est_error <- data.frame("x" = c(brace_x_start, brace_x_end),
"y" = c(data_est_error$sample_risk_gen_error[brace_x_start],
py$constrained_erm$gen_error),
"zoom" = T)
label_est_error <- "Estimation error, $\\epsilon_{est}$"
est_error_plot <- ggplot(data = data_est_error_long, mapping = aes(x = sample_size, y = gen_error,
group = function_type,
color = function_type)) +
geom_line(linewidth = 1.2) +
scale_color_manual(name = "Function Type", values = line_color, labels = labels)  +
labs(x = "Sample Size for Obtaining Sample Risk Minimizer", y = "Generalization Error (Mean Squared Error)",
color = "Function Type") +
facet_zoom(ylim = c(0.23, .236),  zoom.size = 1.2, zoom.data = zoom)  +
#estimation error brace
geom_brace(inherit.aes = F, data = data_brace_est_error,
mapping = aes(x = x, y = y,  label=TeX(label_est_error, output="character")),
color = '#002241', labelsize = 6, rotate = 270, labeldistance = 5,
parse=T) +
theme_classic(base_family = "Helvetica") +
theme(legend.text.align = 0, #left align text
legend.position = 'bottom',
legend.direction = 'vertical',
legend.justification = 'left',
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.margin = margin(t = 1, unit = "cm"),
axis.title  = element_text(size = 18),
axis.text = element_text(size = 15, color = "#002241"),
text = element_text(color = "#002241"),,
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
est_error_plot
#save plot
ggsave(plot = est_error_plot, filename = 'images/est_error_plot2.png', width = 12, height = 9, dpi = 1000)
reticulate::repl_python()
#import data set from Python
data_est_error <- py$data_est_error
#create long version of data_est_error where function (bayes, constrained minimizer, or sample minimizer) is a
#categorical variable
data_est_error["bayes_risk"] <- py$bayes_risk
data_est_error["constr_min"] <- py$constrained_erm$gen_error
data_est_error_long <- data_est_error %>%
pivot_longer(cols = "sample_risk_gen_error":"constr_min", names_to = "function_type", values_to = "gen_error",
names_ptypes = factor())
data_est_error_long$function_type <- factor(x = data_est_error_long$function_type,
levels = c("sample_risk_gen_error", "constr_min", "bayes_risk"))
labels <- c(TeX('Sample risk minimizer, $\\hat{f}_s$'),
TeX('Constrained risk minimizer, $f_\u2131$'),
TeX('Bayes decision function, $f^*$'))
line_color <-  setNames(c("blue", "#2171B5", "#9ECAE1"), levels(data_est_error_long$function_type))
#create data set for braces that show estimation and approximation error.
##see https://stackoverflow.com/questions/45221783/ggforce-facet-zoom-labels-only-on-zoomed-example
brace_x_start <- which.min(data_est_error$sample_risk_gen_error[1:900]) #find minimum value in first 250 values
brace_x_end <- brace_x_start -50
data_brace_est_error <- data.frame("x" = c(brace_x_start, brace_x_end),
"y" = c(data_est_error$sample_risk_gen_error[brace_x_start],
py$constrained_erm$gen_error),
"zoom" = T)
label_est_error <- "Estimation error, $\\epsilon_{est}$"
est_error_plot <- ggplot(data = data_est_error_long, mapping = aes(x = sample_size, y = gen_error,
group = function_type,
color = function_type)) +
geom_line(linewidth = 1.2) +
scale_color_manual(name = "Function Type", values = line_color, labels = labels)  +
labs(x = "Sample Size for Obtaining Sample Risk Minimizer", y = "Generalization Error (Mean Squared Error)",
color = "Function Type") +
facet_zoom(ylim = c(0.23, .236),  zoom.size = 1.2, zoom.data = zoom)  +
#estimation error brace
geom_brace(inherit.aes = F, data = data_brace_est_error,
mapping = aes(x = x, y = y,  label=TeX(label_est_error, output="character")),
color = '#002241', labelsize = 6, rotate = 270, labeldistance = 5,
parse=T) +
theme_classic(base_family = "Helvetica") +
theme(legend.text.align = 0, #left align text
legend.position = 'bottom',
legend.direction = 'vertical',
legend.justification = 'left',
legend.text = element_text(size = 16),
legend.title = element_text(size = 18),
legend.margin = margin(t = 1, unit = "cm"),
axis.title  = element_text(size = 18),
axis.text = element_text(size = 15, color = "#002241"),
text = element_text(color = "#002241"),,
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"))
#save plot
ggsave(plot = est_error_plot, filename = 'images/est_error_plot2.png', width = 12, height = 9, dpi = 1000)
reticulate::repl_python()
#read in .csv file
data_opt_error <- py$data_opt_error
reticulate::repl_python()
#import Python data set
data_emp_gen_error_curve_long <- py$data_emp_gen_error_curve_long
data_emp_gen_error_curve_long$problem <- factor(
x = data_emp_gen_error_curve_long$problem,
labels = c("bold(A:~Error~Patterns~Caused~by~High~Bias~(Underfitting))",
"bold(B:~Error~Patterns~Caused~by~High~Variance~(Overfitting))"))
#text dataframe
data_text_high_bias = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Bias\\phantom{.}(Underfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$features", output = "character"),
TeX(input = "$\\uparrow$complexity", output = "character"),
TeX(input = "$\\downarrow$regularization", output = "character")),
"x" = c(205, 67, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" =  factor("bold(A:~Error~Patterns~Caused~by~High~Bias~(Underfitting))"))
data_text_high_var = data.frame(
"label" = c(TeX(input = "$\\textbf{High\\phantom{.}Variance\\phantom{.}(Overfitting)}$",
output = "character"),
TeX(input = "$\\uparrow$data", output = "character"),
TeX(input = "$\\downarrow$complexity", output = "character"),
TeX(input = "$\\uparrow$regularization", output = "character")),
"x" = c(230, 37, 90, 115),
"y" = c(0.63, .56, .49, .42),
"problem" = factor("bold(B:~Error~Patterns~Caused~by~High~Variance~(Overfitting))"))
data_text_merged <- rbind(data_text_high_var, data_text_high_bias)
#colors
color_palette <-c('gen_error' = '#002241',
'emp_loss' ='#9ECAE1')
#plot
plot_bias_var_rules <- ggplot(data = data_emp_gen_error_curve_long,
mapping = aes(x = training_sample_size, y = error_value,
group = error_type, color = error_type)) +
#data aesthetics
geom_line(linewidth = 1) +
geom_hline(yintercept = 0.3, color = "#002241", linetype = "dashed")  +
geom_text(inherit.aes = F, data = data_text_merged,
mapping = aes(x = x, y = y, label = label),
size = 6, color = "#002241", parse = T) +
#panel aesthetics
facet_wrap(facets =  ~ problem, nrow = 2, ncol = 1, labeller = label_parsed, scales = 'free') +
#scale aesthetics
scale_y_continuous(name = 'Mean Squared Error', breaks = 0.3, labels = expression(epsilon)) +
scale_x_continuous(name = "Sample Size", labels = NULL) +
scale_color_manual(name = "Function Type",
values = color_palette,
labels = c(emp_loss = 'Empirical Loss', gen_error = 'Generalization Error')) +
#custom styling
theme_classic(base_family = 'Helvetica', base_size = 14) +
theme(legend.text = element_text(size = 14),
legend.title = element_text(size = 15),
axis.title  = element_text(size = 15),
axis.text = element_text(size = 14, color = "#002241"),
text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_blank(),
axis.text.y = element_text(size = 20),
strip.text = element_text(size = 17, color = "#002241", hjust = 0),
strip.background = element_blank(),
panel.spacing.y =  unit(x = 3, units = 'cm'))
#save plot
ggsave(filename = "images/plot_bias_var_rules.png", plot = plot_bias_var_rules, width = 10, height = 12, dpi = 1000)
reticulate::repl_python()
#install packages in conda environment
py_packages <- c('numpy', 'pandas', 'scikit-learn', "plotnine", "statsmodels", "smltheory")
conda_install(envname = 'blog_posts', packages = py_packages, pip=T)
reticulate::repl_python()
#read in .csv file
data_opt_error <- py$data_opt_error
#create long version of data_est_error where function (bayes, constrained minimizer, or sample minimizer) is a
#categorical variable
data_est_error["opt_gen_error"] <- data_opt_error$opt_gen_error
reticulate::repl_python()
