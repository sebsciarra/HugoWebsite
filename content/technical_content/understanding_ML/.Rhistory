)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#create and use conda environment
#conda_create(envname = 'blog_posts',  python_version = '3.10.11')
use_condaenv(condaenv = 'blog_posts')
#install packages in conda environment
py_packages <- c('numpy', 'pandas', 'scikit-learn', "plotnine", "statsmodels")
conda_install(envname = 'blog_posts', packages = "trun_mvnt")
reticulate::import(module = "trun_mvnt")
reticulate::repl_python()
#conda_install(envname = 'blog_posts', packages = "trun_mvnt")
reticulate::import(module = "trun_mvnt")
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
day <- seq(from = 0, to = 36, by = 0.01)
M <- 1
satiation_value <- 0.8
satiation_point_fast <- 4.32
satiation_point_slow <- 10.80
a_fast <- log(1 - satiation_value)/-satiation_point_fast
a_slow <- log(1 - satiation_value)/-satiation_point_slow
#y data (response rate)
y_fast <- M*(1 - exp(-a_fast*day))
y_slow <- M*(1 - exp(-a_slow*day))
#1) Generate CDFs
day <- seq(from = 0, to = 36, by = 0.01)
M <- 1
satiation_value <- 0.8
satiation_point_fast <- 4.32
satiation_point_slow <- 10.80
a_fast <- log(1 - satiation_value)/-satiation_point_fast
a_slow <- log(1 - satiation_value)/-satiation_point_slow
#y data (response rate)
y_fast <- M*(1 - exp(-a_fast*day))
y_slow <- M*(1 - exp(-a_slow*day))
cdf_data <- data.frame('dist_type' = factor(c(rep('bold(A:~CDF~(Fast~Response~Rate))', times = length(y_fast)),
rep('bold(B:~CDF~(Slow~Response~Rate))', times = length(y_slow)))),
'day' = rep(day, times = 2),
'CDF' = c(y_fast, y_slow))
cdf_plot <- ggplot(cdf_data, aes(x = day, y = CDF)) +
geom_line(size = 2.5) +
scale_y_continuous(name = 'Cumulative Response Percentage', breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
ggplot(cdf_data, aes(x = day, y = CDF)) +
geom_line(size = 2.5) +
scale_y_continuous(name = 'Cumulative Response Percentage', breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
ggplot(cdf_data, aes(x = day, y = CDF)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage', breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
cdf_data <- data.frame('dist_type' = factor(c(rep('bold(A:~CDF~(Fast~Response~Rate))', times = length(y_fast)))
a_fast <- log(1 - satiation_value)/-satiation_point_fast
cdf_data <- data.frame('dist_type' = factor(c(rep('bold(A:~CDF~(Fast~Response~Rate))', times = length(y_fast)))),
'day' = rep(day, times = 1),
'CDF' = c(y_fast))
ggplot(cdf_data, aes(x = day, y = CDF)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage', breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
a_fast <- log(0.5 - satiation_value)/-satiation_point_fast
a_slow <- log(1 - satiation_value)/-satiation_point_slow
#y data (response rate)
y_fast <- M*(0.5 - exp(-a_fast*day))
cdf_data <- data.frame('dist_type' = factor(c(rep('bold(A:~CDF~(Fast~Response~Rate))', times = length(y_fast)))),
'day' = rep(day, times = 1),
'CDF' = c(y_fast))
ggplot(cdf_data, aes(x = day, y = CDF)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage', breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
a_fast <- log(1 - satiation_value)/-satiation_point_fast
#y data (response rate)
y_fast <- 0.5*(1 - exp(-a_fast*day))
cdf_data <- data.frame('dist_type' = factor(c(rep('bold(A:~CDF~(Fast~Response~Rate))', times = length(y_fast)))),
'day' = rep(day, times = 1),
'CDF' = c(y_fast))
ggplot(cdf_data, aes(x = day, y = CDF)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage', breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 500, by = 1)
M <- 3
training_sample_size <- seq(from = 0, to = 500, by = 1)
M <- 3
satiation_value <- 250
satiation_point_fast <- 4.32
satiation_point_slow <- 10.80
a_fast <- log(1 - satiation_value)/-satiation_point_fast
a_slow <- log(1 - satiation_value)/-satiation_point_slow
#y data (response rate)
y_fast <- 0.5*(1 - exp(-a_fast*day))
cdf_data <- data.frame('dist_type' = factor(c(rep('bold(A:~CDF~(Fast~Response~Rate))', times = length(y_fast)))),
'training_sample_size' = rep(day, times = 1),
'CDF' = c(y_fast))
ggplot(cdf_data, aes(x = day, y = CDF)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
ggplot(cdf_data, aes(x = training_sample_size, y = CDF)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
reticulate::repl_python()
training_sample_size <- seq(from = 0, to = 500, by = 1)
M <- 3
satiation_value <- 250
satiation_point_fast <- 4.32
satiation_point_slow <- 10.80
a_fast <- log(1 - satiation_value)/-satiation_point_fast
a_slow <- log(1 - satiation_value)/-satiation_point_slow
#y data (response rate)
y_fast <- 0.5*(1 - exp(-a_fast*day))
cdf_data <- data.frame('dist_type' = factor(c(rep('bold(A:~CDF~(Fast~Response~Rate))', times = length(y_fast)))),
'training_sample_size' = rep(day, times = 1),
'CDF' = c(y_fast))
ggplot(cdf_data, aes(x = training_sample_size, y = CDF)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
cdf_data
cdf_data <- data.frame('dist_type' = factor(c(rep('bold(A:~CDF~(Fast~Response~Rate))', times = length(y_fast)))),
'training_sample_size' = training_sample_size,
'error' = c(y_fast))
cdf_data <- data.frame('training_sample_size' = training_sample_size,
'error' = c(y_fast))
#y data (response rate)
y_fast <- 0.5*(1 - exp(-a_fast*training_sample_size))
#y data (response rate)
curve_gen_error <- fast <- 0.5*(1 - exp(-a_fast*training_sample_size))
cdf_data <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
cdf_data
satiation_value <- 0.5
satiation_point_gen_error <- 4.32
a_fast <- log(1 - satiation_value)/-satiation_point_gen_error
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#y data (response rate)
curve_gen_error <- fast <- 0.5*(1 - exp(-a_fast*training_sample_size))
cdf_data <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(cdf_data, aes(x = training_sample_size, y = CDF)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
cdf_data
satiation_value <- 0.5
satiation_point_gen_error <- 100
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#y data (response rate)
curve_gen_error <- fast <- 0.5*(1 - exp(-a_fast*training_sample_size))
cdf_data <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- 0.5*(1 - exp(-a_fast*training_sample_size))
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
data_gen_error_curve
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(cdf_data, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 500, by = 1)
M <- 0.5
satiation_value <- 0.5
satiation_point_gen_error <- 300
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- M*(1 - exp(-a_fast*training_sample_size))
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(cdf_data, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#curve generalization error
curve_gen_error <- fast <- M*(1 - exp(-a_gen_error*training_sample_size))
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(cdf_data, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 500, by = 1)
M <- 0.5
satiation_value <- 0.5
satiation_point_gen_error <- 300
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- M*(1 - exp(-a_gen_error*training_sample_size))
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(cdf_data, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 1000, by = 1)
M <- 0.5
satiation_value <- 0.5
satiation_point_gen_error <- 300
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- M*(1 - exp(-a_gen_error*training_sample_size))
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 1000, by = 1)
M <- 0.5
satiation_value <- 0.5
satiation_point_gen_error <- 200
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- M*(1 - exp(-a_gen_error*training_sample_size))
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
satiation_point_gen_error <- 150
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 1000, by = 1)
M <- 0.5
satiation_value <- 0.5
satiation_point_gen_error <- 150
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- M*(1 - exp(-a_gen_error*training_sample_size))
data_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#curve generalization error
curve_gen_error <- fast <- -M*(1 - exp(-a_gen_error*training_sample_size))
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 1000, by = 1)
M <- 0.5
satiation_value <- 0.5
satiation_point_gen_error <- 150
a_gen_error <- log(1 - satiation_value)/-satiation_point_gen_error
#curve generalization error
curve_gen_error <- fast <- -M*(1 - exp(-a_gen_error*training_sample_size))
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
curve_gen_error
#curve generalization error
curve_gen_error <- -M*(1 - exp(-a_gen_error*training_sample_size))
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
curve_gen_error
ggplot(data_emp_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
#curve generalization error
curve_gen_error <- -M*(1 - exp(-a_gen_error*training_sample_size)) + 1
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'error' = curve_gen_error)
ggplot(data_emp_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Cumulative Response Percentage',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve, aes(x = training_sample_size, y = error)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss")
satiation_value_gen_error <- 0.5
satiation_point_gen_error <- 150
satiation_value_emp_loss <- 0.48
satiation_point_emp_loss <- 200
a_gen_error <- log(1 - satiation_value_gen_error)/-satiation_point_gen_error
a_emp_loss <- log(1 - satiation_value_emp_loss)/-satiation_point_emp_loss
#curve generalization error
curve_gen_error <- -M*(1 - exp(-a_gen_error*training_sample_size)) + 1
curve_emp_loss <- -M*(1 - exp(-a_emp_loss*training_sample_size)) +
curve_emp_loss <- -M*(1 - exp(-a_emp_loss*training_sample_size)) + 1
curve_emp_loss <- -M*(1 - exp(-a_emp_loss*training_sample_size)) + 1
?pivot_longer
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function', values_to = 'error_value')
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = c("gen_error", "emp_loss"), names_to = 'function', values_to = 'error_value')
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'gen_error' = curve_gen_error,
'emp_loss' = curve_emp_loss)
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = c("gen_error", "emp_loss"), names_to = 'function', values_to = 'error_value')
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function', values_to = 'error_value')
data_emp_gen_error_curve_long
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function', values_to = 'error_value',
names_transform = factor())
data_emp_gen_error_curve_long
names_transform = factor
)
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function', values_to = 'error_value',
names_transform = factor)
data_emp_gen_error_curve_long
curve generalization error
#
#curve generalization error
curve_gen_error <- -M*(1 - exp(-a_gen_error*training_sample_size)) + 1
curve_emp_loss <- M*(1 - exp(-a_emp_loss*training_sample_size)) + 1
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'gen_error' = curve_gen_error,
'emp_loss' = curve_emp_loss)
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function', values_to = 'error_value',
names_transform = factor)
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = 'function', color = 'function')) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
group = 'function') +
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = 'function')) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
data_emp_gen_error_curve_long
curve_emp_loss <- M*(1 - exp(-a_emp_loss*training_sample_size))
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'gen_error' = curve_gen_error,
'emp_loss' = curve_emp_loss)
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function_type', values_to = 'error_value',
names_transform = factor)
data_emp_gen_error_curve_long
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = 'function')) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = 'function_type')) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
data_emp_gen_error_curve_long
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
#1) Generate CDFs
training_sample_size <- seq(from = 0, to = 1000, by = 1)
M <- 0.5
satiation_value_gen_error <- 0.5
satiation_point_gen_error <- 250
satiation_value_emp_loss <- 0.495
satiation_point_emp_loss <- 150
a_gen_error <- log(1 - satiation_value_gen_error)/-satiation_point_gen_error
a_emp_loss <- log(1 - satiation_value_emp_loss)/-satiation_point_emp_loss
#curve generalization error
curve_gen_error <- -M*(1 - exp(-a_gen_error*training_sample_size)) + 1
curve_emp_loss <- M*(1 - exp(-a_emp_loss*training_sample_size))
data_emp_gen_error_curve <- data.frame('training_sample_size' = training_sample_size,
'gen_error' = curve_gen_error,
'emp_loss' = curve_emp_loss)
data_emp_gen_error_curve_long <- data_emp_gen_error_curve %>%
pivot_longer(cols = "gen_error":"emp_loss", names_to = 'function_type', values_to = 'error_value',
names_transform = factor)
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40)
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
pt.scale_color_manual(values = color_palette,
labels = c('emp_loss': 'Empirical Loss', 'gen_error': 'Generalization Error')) +
theme_classic(base_family = 'Helvetica')
color_palette = data.frame('gen_error' = '#002241',
'emp_loss' = '#9ECAE1')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
scale_color_manual(values = color_palette,
labels = c('emp_loss': 'Empirical Loss', 'gen_error': 'Generalization Error')) +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
scale_color_manual(values = color_palette,
labels = c('emp_loss' = 'Empirical Loss', 'gen_error' = 'Generalization Error')) +
theme_classic(base_family = 'Helvetica')
ggplot(data_emp_gen_error_curve_long, aes(x = training_sample_size, y = error_value,
group = function_type, color = function_type)) +
geom_line(size = 1) +
geom_hline(yintercept = 0.40) +
scale_y_continuous(name = 'Mean Squared Error',
breaks = c(0.00, 0.25, 0.50, 0.80, 1.00)) +
scale_x_continuous(name = "Sample Size for Empirical Loss") +
scale_color_manual(values = color_palette,
labels = c('emp_loss' = 'Empirical Loss', 'gen_error' = 'Generalization Error')) +
theme_classic(base_family = 'Helvetica')
reticulate::repl_python()
