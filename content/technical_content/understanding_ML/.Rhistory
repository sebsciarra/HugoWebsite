feature_cols = pd.concat(objs=[predictors, predictors**2, predictors.prod(axis=1)], axis=1)
# Intercept
intercept = np.mean(data_test["wine_quality"]) - np.sum(provide_weights() * compute_rescaling_factor() * np.mean(feature_cols, axis=0))
# Compute predictions for wine quality
test_pred = intercept + np.dot(a=feature_cols, b=provide_weights() * compute_rescaling_factor())
# Compute mean squared error
bayes_risk = mean_squared_error(y_true=data_test['wine_quality'], y_pred=test_pred)
return bayes_risk
create_poly_regression_equation(poly_order=2, include_interactions=T)
create_poly_regression_equation(poly_order=2, include_interactions=True)
data_train, data_test = train_test_split(mult_trunc_data, test_size = 0.20, random_state=27)
df_test_train = compute_test_train_MSE(data_train=data_train, data_test=data_test,
poly_order_range=range(1, 10))
df_test_train
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import statsmodels.formula.api as smf
from functools import partial
def compute_test_train_MSE(data_train, data_test, poly_order_range, include_interactions = False):
#create all polynomial equations within the desired range
poly_equations = list(map(create_poly_regression_equation, poly_order_range))
#create partial version of function with data_train and data_test fixed
train_test_error_partial = partial(compute_test_train_error, data_train = data_train, data_test = data_test,
include_interactions = include_interactions)
#for each polynomial equation, compute test and training error
train_test_errors = list(map(train_test_error_partial,  poly_equations))
#convert dictionnary to dataframe and then compute polynomial orders by using row indexes
df_train_test_errors = pd.DataFrame(train_test_errors)
poly_orders = pd.Series(df_train_test_errors.index.values + 1, name = "poly_order")
#concatenate poly_orders and dataframe to create complete dataframe
df_train_test_errors = pd.concat([poly_orders, df_train_test_errors], axis = 1)
return df_train_test_errors
def create_poly_regression_equation(poly_order, include_interactions = False):
#compute polynomial terms for predictors
weather_pred = ' + '.join(['np.power(weather, {})'.format(ord_value) for ord_value in range(1, poly_order+1)])
winemaking_quality_pred = ' + '.join(['np.power(winemaking_quality, {})'.format(ord_value) for ord_value in range(1,
poly_order+1)])
# Compute all two-way interactions between weather and winemaking_quality
if include_interactions:
interaction_terms = ' + '.join(['np.multiply(np.power(weather, {}), np.power(winemaking_quality, {}))'.format(p1, p2)
for p1 in range(1, poly_order+1)
for p2 in range(1, poly_order+1)])
predictors = ' + '.join([weather_pred, winemaking_quality_pred, interaction_terms])
else:
predictors = ' + '.join([weather_pred, winemaking_quality_pred])
#create regression equation
equation = "wine_quality ~ {}".format(predictors)
return equation
def compute_test_train_error(equation, data_train, data_test):
model = smf.ols(data = data_train, formula = equation).fit()
y_test = model.predict(data_test)
train_error = mean_squared_error(y_true = data_train['wine_quality'], y_pred = model.fittedvalues)
test_error = mean_squared_error(y_true = data_test['wine_quality'], y_pred = y_test)
return {'train_error': train_error,
'test_error': test_error}
def compute_bayes_risk(data_test):
# Feature columns
predictors = data_test[["weather", "winemaking_quality"]]
feature_cols = pd.concat(objs=[predictors, predictors**2, predictors.prod(axis=1)], axis=1)
# Intercept
intercept = np.mean(data_test["wine_quality"]) - np.sum(provide_weights() * compute_rescaling_factor() * np.mean(feature_cols, axis=0))
# Compute predictions for wine quality
test_pred = intercept + np.dot(a=feature_cols, b=provide_weights() * compute_rescaling_factor())
# Compute mean squared error
bayes_risk = mean_squared_error(y_true=data_test['wine_quality'], y_pred=test_pred)
return bayes_risk
data_train, data_test = train_test_split(mult_trunc_data, test_size = 0.20, random_state=27)
df_test_train = compute_test_train_MSE(data_train=data_train, data_test=data_test,
poly_order_range=range(1, 10),include_interactions=True)
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import statsmodels.formula.api as smf
from functools import partial
def compute_test_train_MSE(data_train, data_test, poly_order_range, include_interactions = False):
#create all polynomial equations within the desired range
poly_equations = list(map(create_poly_regression_equation, poly_order_range))
#create partial version of function with data_train and data_test fixed
train_test_error_partial = partial(compute_test_train_error, data_train = data_train, data_test = data_test,
include_interactions = include_interactions)
#for each polynomial equation, compute test and training error
train_test_errors = list(map(train_test_error_partial,  poly_equations))
#convert dictionnary to dataframe and then compute polynomial orders by using row indexes
df_train_test_errors = pd.DataFrame(train_test_errors)
poly_orders = pd.Series(df_train_test_errors.index.values + 1, name = "poly_order")
#concatenate poly_orders and dataframe to create complete dataframe
df_train_test_errors = pd.concat([poly_orders, df_train_test_errors], axis = 1)
return df_train_test_errors
def create_poly_regression_equation(poly_order, include_interactions = False):
#compute polynomial terms for predictors
weather_pred = ' + '.join(['np.power(weather, {})'.format(ord_value) for ord_value in range(1, poly_order+1)])
winemaking_quality_pred = ' + '.join(['np.power(winemaking_quality, {})'.format(ord_value) for ord_value in range(1,
poly_order+1)])
# Compute all two-way interactions between weather and winemaking_quality
if include_interactions:
interaction_terms = ' + '.join(['np.multiply(np.power(weather, {}), np.power(winemaking_quality, {}))'.format(p1, p2)
for p1 in range(1, poly_order+1)
for p2 in range(1, poly_order+1)])
predictors = ' + '.join([weather_pred, winemaking_quality_pred, interaction_terms])
else:
predictors = ' + '.join([weather_pred, winemaking_quality_pred])
#create regression equation
equation = "wine_quality ~ {}".format(predictors)
return equation
def compute_test_train_error(equation, data_train, data_test):
model = smf.ols(data = data_train, formula = equation).fit()
y_test = model.predict(data_test)
train_error = mean_squared_error(y_true = data_train['wine_quality'], y_pred = model.fittedvalues)
test_error = mean_squared_error(y_true = data_test['wine_quality'], y_pred = y_test)
return {'train_error': train_error,
'test_error': test_error}
def compute_bayes_risk(data_test):
# Feature columns
predictors = data_test[["weather", "winemaking_quality"]]
feature_cols = pd.concat(objs=[predictors, predictors**2, predictors.prod(axis=1)], axis=1)
# Intercept
intercept = np.mean(data_test["wine_quality"]) - np.sum(provide_weights() * compute_rescaling_factor() * np.mean(feature_cols, axis=0))
# Compute predictions for wine quality
test_pred = intercept + np.dot(a=feature_cols, b=provide_weights() * compute_rescaling_factor())
# Compute mean squared error
bayes_risk = mean_squared_error(y_true=data_test['wine_quality'], y_pred=test_pred)
return bayes_risk
data_train, data_test = train_test_split(mult_trunc_data, test_size = 0.20, random_state=27)
df_test_train = compute_test_train_MSE(data_train=data_train, data_test=data_test,
poly_order_range=range(1, 10), include_interactions=True)
df_test_train = compute_test_train_MSE(data_train=data_train, data_test=data_test,include_interactions=True,
poly_order_range=range(1, 10))
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import statsmodels.formula.api as smf
from functools import partial
def compute_test_train_MSE(data_train, data_test,include_interactions = False, poly_order_range):
#create all polynomial equations within the desired range
poly_equations = list(map(create_poly_regression_equation, poly_order_range))
#create partial version of function with data_train and data_test fixed
train_test_error_partial = partial(compute_test_train_error, data_train = data_train, data_test = data_test,
include_interactions = include_interactions)
#for each polynomial equation, compute test and training error
train_test_errors = list(map(train_test_error_partial,  poly_equations))
#convert dictionnary to dataframe and then compute polynomial orders by using row indexes
df_train_test_errors = pd.DataFrame(train_test_errors)
poly_orders = pd.Series(df_train_test_errors.index.values + 1, name = "poly_order")
#concatenate poly_orders and dataframe to create complete dataframe
df_train_test_errors = pd.concat([poly_orders, df_train_test_errors], axis = 1)
return df_train_test_errors
def create_poly_regression_equation(poly_order, include_interactions = False):
#compute polynomial terms for predictors
weather_pred = ' + '.join(['np.power(weather, {})'.format(ord_value) for ord_value in range(1, poly_order+1)])
winemaking_quality_pred = ' + '.join(['np.power(winemaking_quality, {})'.format(ord_value) for ord_value in range(1,
poly_order+1)])
# Compute all two-way interactions between weather and winemaking_quality
if include_interactions:
interaction_terms = ' + '.join(['np.multiply(np.power(weather, {}), np.power(winemaking_quality, {}))'.format(p1, p2)
for p1 in range(1, poly_order+1)
for p2 in range(1, poly_order+1)])
predictors = ' + '.join([weather_pred, winemaking_quality_pred, interaction_terms])
else:
predictors = ' + '.join([weather_pred, winemaking_quality_pred])
#create regression equation
equation = "wine_quality ~ {}".format(predictors)
return equation
def compute_test_train_error(equation, data_train, data_test):
model = smf.ols(data = data_train, formula = equation).fit()
y_test = model.predict(data_test)
train_error = mean_squared_error(y_true = data_train['wine_quality'], y_pred = model.fittedvalues)
test_error = mean_squared_error(y_true = data_test['wine_quality'], y_pred = y_test)
return {'train_error': train_error,
'test_error': test_error}
def compute_bayes_risk(data_test):
# Feature columns
predictors = data_test[["weather", "winemaking_quality"]]
feature_cols = pd.concat(objs=[predictors, predictors**2, predictors.prod(axis=1)], axis=1)
# Intercept
intercept = np.mean(data_test["wine_quality"]) - np.sum(provide_weights() * compute_rescaling_factor() * np.mean(feature_cols, axis=0))
# Compute predictions for wine quality
test_pred = intercept + np.dot(a=feature_cols, b=provide_weights() * compute_rescaling_factor())
# Compute mean squared error
bayes_risk = mean_squared_error(y_true=data_test['wine_quality'], y_pred=test_pred)
return bayes_risk
data_train, data_test = train_test_split(mult_trunc_data, test_size = 0.20, random_state=27)
#compute testing and training errors for polynomial models up to ninth order
df_test_train = compute_test_train_MSE(data_train=data_train, data_test=data_test,include_interactions=True,
poly_order_range=range(1, 10))
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import statsmodels.formula.api as smf
from functools import partial
def compute_test_train_MSE(data_train, data_test, include_interactions = False, poly_order_range):
#create all polynomial equations within the desired range
poly_equations = list(map(create_poly_regression_equation, poly_order_range))
#create partial version of function with data_train and data_test fixed
train_test_error_partial = partial(compute_test_train_error, data_train = data_train, data_test = data_test,
include_interactions = include_interactions)
#for each polynomial equation, compute test and training error
train_test_errors = list(map(train_test_error_partial,  poly_equations))
#convert dictionnary to dataframe and then compute polynomial orders by using row indexes
df_train_test_errors = pd.DataFrame(train_test_errors)
poly_orders = pd.Series(df_train_test_errors.index.values + 1, name = "poly_order")
#concatenate poly_orders and dataframe to create complete dataframe
df_train_test_errors = pd.concat([poly_orders, df_train_test_errors], axis = 1)
return df_train_test_errors
def compute_test_train_error(equation, data_train, data_test, include_interactions = False):
model = smf.ols(data = data_train, formula = equation).fit()
y_test = model.predict(data_test)
train_error = mean_squared_error(y_true = data_train['wine_quality'], y_pred = model.fittedvalues)
test_error = mean_squared_error(y_true = data_test['wine_quality'], y_pred = y_test)
return {'train_error': train_error,
'test_error': test_error}
def create_poly_regression_equation(poly_order, include_interactions = False):
#compute polynomial terms for predictors
weather_pred = ' + '.join(['np.power(weather, {})'.format(ord_value) for ord_value in range(1, poly_order+1)])
winemaking_quality_pred = ' + '.join(['np.power(winemaking_quality, {})'.format(ord_value) for ord_value in range(1,
poly_order+1)])
# Compute all two-way interactions between weather and winemaking_quality
if include_interactions:
interaction_terms = ' + '.join(['np.multiply(np.power(weather, {}), np.power(winemaking_quality, {}))'.format(p1, p2)
for p1 in range(1, poly_order+1)
for p2 in range(1, poly_order+1)])
predictors = ' + '.join([weather_pred, winemaking_quality_pred, interaction_terms])
else:
predictors = ' + '.join([weather_pred, winemaking_quality_pred])
#create regression equation
equation = "wine_quality ~ {}".format(predictors)
return equation
def compute_bayes_risk(data_test):
# Feature columns
predictors = data_test[["weather", "winemaking_quality"]]
feature_cols = pd.concat(objs=[predictors, predictors**2, predictors.prod(axis=1)], axis=1)
# Intercept
intercept = np.mean(data_test["wine_quality"]) - np.sum(provide_weights() * compute_rescaling_factor() * np.mean(feature_cols, axis=0))
# Compute predictions for wine quality
test_pred = intercept + np.dot(a=feature_cols, b=provide_weights() * compute_rescaling_factor())
# Compute mean squared error
bayes_risk = mean_squared_error(y_true=data_test['wine_quality'], y_pred=test_pred)
return bayes_risk
df_test_train = compute_test_train_MSE(data_train=data_train, data_test=data_test,include_interactions=True,
poly_order_range=range(1, 10))
df_test_train
poly_order_range=range(1, 10)
list(map(create_poly_regression_equation, poly_order_range))
df_test_train
df_test_train = compute_test_train_MSE(data_train=data_train, data_test=data_test,include_interactions=False,
poly_order_range=range(1, 10))
df_test_train
partial(compute_test_train_error, data_train = data_train, data_test = data_test,
include_interactions = include_interactions)
include_interactions = True)
ex_test = partial(compute_test_train_error, data_train = data_train, data_test = data_test,
include_interactions = True)
ex_test(poly_equations[1])
poly_equations = list(map(create_poly_regression_equation, poly_order_range))
ex_test(poly_equations[1])
compute_test_train_error(equation=poly_equations[1], data_train, data_test)
def compute_test_train_error(equation, data_train, data_test):
model = smf.ols(data = data_train, formula = equation).fit()
y_test = model.predict(data_test)
train_error = mean_squared_error(y_true = data_train['wine_quality'], y_pred = model.fittedvalues)
test_error = mean_squared_error(y_true = data_test['wine_quality'], y_pred = y_test)
return {'train_error': train_error,
'test_error': test_error}
compute_test_train_error(equation=poly_equations[1], data_train, data_test)
compute_test_train_error(equation=poly_equations[1], data_train=data_train, data_test)
poly_equations
compute_test_train_error(equation=poly_equations[1], data_train=data_train, data_test = data_test)
smf.old(data = data_train, formula = poly_equations[1]).fit()
smf.ols(data = data_train, formula = poly_equations[1]).fit()
model_ex = smf.ols(data = data_train, formula = poly_equations[1]).fit()
model_ex.summary()
def compute_test_train_MSE(data_train, data_test, include_interactions = False, poly_order_range):
#create all polynomial equations within the desired range
gen_poly_reg_eq_partial = partial(gen_poly_reg_eq, include_interactions = include_interactions)
poly_equations = list(map(gen_poly_reg_eq_partial, poly_order_range))
#create partial version of function with data_train and data_test fixed
train_test_error_partial = partial(compute_test_train_error, data_train = data_train, data_test = data_test)
#for each polynomial equation, compute test and training error
train_test_errors = list(map(train_test_error_partial,  poly_equations))
#convert dictionnary to dataframe and then compute polynomial orders by using row indexes
df_train_test_errors = pd.DataFrame(train_test_errors)
poly_orders = pd.Series(df_train_test_errors.index.values + 1, name = "poly_order")
#concatenate poly_orders and dataframe to create complete dataframe
df_train_test_errors = pd.concat([poly_orders, df_train_test_errors], axis = 1)
return df_train_test_errors
def gen_poly_reg_eq(poly_order, include_interactions = False):
#compute polynomial terms for predictors
weather_pred = ' + '.join(['np.power(weather, {})'.format(ord_value) for ord_value in range(1, poly_order+1)])
winemaking_quality_pred = ' + '.join(['np.power(winemaking_quality, {})'.format(ord_value) for ord_value in range(1,
poly_order+1)])
# Compute all two-way interactions between weather and winemaking_quality
if include_interactions:
interaction_terms = ' + '.join(['np.multiply(np.power(weather, {}), np.power(winemaking_quality, {}))'.format(p1, p2)
for p1 in range(1, poly_order+1)
for p2 in range(1, poly_order+1)])
predictors = ' + '.join([weather_pred, winemaking_quality_pred, interaction_terms])
else:
predictors = ' + '.join([weather_pred, winemaking_quality_pred])
#create regression equation
equation = "wine_quality ~ {}".format(predictors)
return equation
def compute_test_train_MSE(data_train, data_test, include_interactions = False, poly_order_range):
#create all polynomial equations within the desired range
gen_poly_reg_eq_partial = partial(gen_poly_reg_eq, include_interactions = include_interactions)
poly_equations = list(map(gen_poly_reg_eq_partial, poly_order_range))
#create partial version of function with data_train and data_test fixed
train_test_error_partial = partial(compute_test_train_error, data_train = data_train, data_test = data_test)
#for each polynomial equation, compute test and training error
train_test_errors = list(map(train_test_error_partial,  poly_equations))
#convert dictionnary to dataframe and then compute polynomial orders by using row indexes
df_train_test_errors = pd.DataFrame(train_test_errors)
poly_orders = pd.Series(df_train_test_errors.index.values + 1, name = "poly_order")
#concatenate poly_orders and dataframe to create complete dataframe
df_train_test_errors = pd.concat([poly_orders, df_train_test_errors], axis = 1)
return df_train_test_errors
def compute_test_train_MSE(data_train, data_test, include_interactions = False, poly_order_range):
#create all polynomial equations within the desired range
gen_poly_reg_eq_partial = partial(gen_poly_reg_eq, include_interactions = include_interactions)
poly_equations = list(map(gen_poly_reg_eq_partial, poly_order_range))
#create partial version of function with data_train and data_test fixed
train_test_error_partial = partial(compute_test_train_error, data_train = data_train, data_test = data_test)
#for each polynomial equation, compute test and training error
train_test_errors = list(map(train_test_error_partial,  poly_equations))
#convert dictionnary to dataframe and then compute polynomial orders by using row indexes
df_train_test_errors = pd.DataFrame(train_test_errors)
poly_orders = pd.Series(df_train_test_errors.index.values + 1, name = "poly_order")
#concatenate poly_orders and dataframe to create complete dataframe
df_train_test_errors = pd.concat([poly_orders, df_train_test_errors], axis = 1)
return df_train_test_errors
gen_poly_reg_eq_partial = partial(gen_poly_reg_eq, include_interactions = True)
gen_poly_reg_eq_partial
poly_equations = list(map(gen_poly_reg_eq_partial, poly_order_range))
model_ex = smf.ols(data = data_train, formula = poly_equations[1]).fit()
model_ex.summary
model_ex.summary()
model_ex = smf.ols(data = data_train, formula = poly_equations[0]).fit()
model_ex.summary()
def gen_poly_reg_eq(poly_order, include_interactions = False):
#compute polynomial terms for predictors
weather_pred = ' + '.join(['np.power(weather, {})'.format(ord_value) for ord_value in range(1, poly_order+1)])
winemaking_quality_pred = ' + '.join(['np.power(winemaking_quality, {})'.format(ord_value) for ord_value in range(1,
poly_order+1)])
# Compute all two-way interactions between weather and winemaking_quality
if include_interactions:
interaction_terms = ' + '.join(['np.multiply(np.power(weather, {}), np.power(winemaking_quality, {}))'.format(p1, p2)
for p1 in range(1, poly_order)
for p2 in range(1, poly_order)])
predictors = ' + '.join([weather_pred, winemaking_quality_pred, interaction_terms])
else:
predictors = ' + '.join([weather_pred, winemaking_quality_pred])
#create regression equation
equation = "wine_quality ~ {}".format(predictors)
return equation
poly_equations = list(map(gen_poly_reg_eq_partial, poly_order_range))
model_ex = smf.ols(data = data_train, formula = poly_equations[0]).fit()
model_ex.summary()
model_ex = smf.ols(data = data_train, formula = poly_equations[1]).fit()
model_ex.summary()
def gen_poly_reg_eq(poly_order, include_interactions = False):
#compute polynomial terms for predictors
weather_pred = ' + '.join(['np.power(weather, {})'.format(ord_value) for ord_value in range(1, poly_order+1)])
winemaking_quality_pred = ' + '.join(['np.power(winemaking_quality, {})'.format(ord_value) for ord_value in range(1,
poly_order+1)])
# Compute all two-way interactions between weather and winemaking_quality
if include_interactions:
interaction_terms = ' + '.join(['np.multiply(np.power(weather, {}), np.power(winemaking_quality, {}))'.format(p1, p2)
for p1 in range(1, poly_order-1)
for p2 in range(1, poly_order-1)])
predictors = ' + '.join([weather_pred, winemaking_quality_pred, interaction_terms])
else:
predictors = ' + '.join([weather_pred, winemaking_quality_pred])
#create regression equation
equation = "wine_quality ~ {}".format(predictors)
return equation
poly_equations = list(map(gen_poly_reg_eq_partial, poly_order_range))
poly_equations[1]
gen_poly_reg_eq(poly_order=2, True)
gen_poly_reg_eq(poly_order=2, include_interactions=True)
def gen_poly_reg_eq(poly_order, include_interactions = False):
#compute polynomial terms for predictors
weather_pred = ' + '.join(['np.power(weather, {})'.format(ord_value) for ord_value in range(1, poly_order+1)])
winemaking_quality_pred = ' + '.join(['np.power(winemaking_quality, {})'.format(ord_value) for ord_value in range(1,
poly_order+1)])
# Compute all two-way interactions between weather and winemaking_quality
if include_interactions:
interaction_terms = ' + '.join(['np.multiply(np.power(weather, {}), np.power(winemaking_quality, {}))'.format(p1, p2)
for p1 in range(1, poly_order)
for p2 in range(1, poly_order)])
predictors = ' + '.join([weather_pred, winemaking_quality_pred, interaction_terms])
else:
predictors = ' + '.join([weather_pred, winemaking_quality_pred])
#create regression equation
equation = "wine_quality ~ {}".format(predictors)
return equation
gen_poly_reg_eq(poly_order=2, include_interactions=True)
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'tensorflow')
libraries(packages)
knitr::opts_chunk$set(comment = NA, echo = TRUE, eval = TRUE, warning = FALSE)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#create and use conda environment
#conda_create(envname = 'blog_posts',  python_version = '3.10.11')
use_condaenv(condaenv = 'blog_posts')
#install packages in conda environment
py_packages <- c('numpy', 'pandas', 'scikit-learn', "plotnine", "statsmodels")
#conda_install(envname = 'blog_posts', packages = "statsmodels")
#install_tensorflow(method = 'conda', envname = 'blog_posts')#can take long time (~10 minutes)
#useful for checking what packages are loaded
#py_list_packages(envname = 'blog_posts', type = 'conda')
#pandoc content/coding_tricks/em_demo/refs.bib -t csljson -o content/coding_tricks/em_demo/refs.json
#git clone https://github.com/ralphma1203/trun_mvnt.git
reticulate::repl_python()
reticulate::repl_python()
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'tensorflow')
libraries(packages)
knitr::opts_chunk$set(comment = NA, echo = TRUE, eval = TRUE, warning = FALSE)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#create and use conda environment
#conda_create(envname = 'blog_posts',  python_version = '3.10.11')
use_condaenv(condaenv = 'blog_posts')
#install packages in conda environment
py_packages <- c('numpy', 'pandas', 'scikit-learn', "plotnine", "statsmodels")
#conda_install(envname = 'blog_posts', packages = "statsmodels")
#install_tensorflow(method = 'conda', envname = 'blog_posts')#can take long time (~10 minutes)
#useful for checking what packages are loaded
#py_list_packages(envname = 'blog_posts', type = 'conda')
#pandoc content/coding_tricks/em_demo/refs.bib -t csljson -o content/coding_tricks/em_demo/refs.json
#git clone https://github.com/ralphma1203/trun_mvnt.git
reticulate::repl_python()
