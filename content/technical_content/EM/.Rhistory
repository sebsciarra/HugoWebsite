highest_number_ind <- which.max(prob_distribution$probability) #index of highest probability
most_likely_number <- prob_distribution$num_successes[highest_number_ind] #most likely number of successes
highest_prob <- max(prob_distribution$probability) #probability value of most likely number of successes
rectangle_data <-data.frame(
'xmin' = most_likely_number - 0.10,
'xmax' = most_likely_number + 0.10,
'ymin' = 0,
'ymax' = highest_prob)
#create pmf plot
pmf_plot <- ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_line(linewidth = 1) +
geom_rect(inherit.aes = F, data = rectangle_data, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = 'grey50', color = NA, alpha = 0.2) +
scale_y_continuous(name = bquote(italic("P(h")*"|"*italic(theta == .(prob_success)*","~n == .(num_trials)*")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")"),
breaks = seq(from = 0, to = 10, by = 1)) +
theme_classic(base_family = "Helvetica", base_size = 18) +
theme(axis.title.y = element_text(face = 'italic'),
#embolden only the
axis.text.x = element_text(face = ifelse(test = prob_distribution$num_successes == most_likely_number,
no =  "plain",
yes = "bold")),
text = element_text(color = "#002241"),
line = element_line(color = "#002241"),
axis.text = element_text(color = "#002241"))
ggsave(filename = 'images/pmf_plot.png', plot = pmf_plot, height = 6, width = 8)
sum(prob_distribution$probability)
binomial_function <- expression(factorial(n)/(factorial(h)*factorial(n-h)))
D(expr = binomial_function,name = 'n')
D(expr = binomial_function,name = 'h')
binomial_function <- expression(factorial(n)/(factorial(h)*factorial(n-h))*(theta)^h*(1 - theta)^(n-h))
D(expr = binomial_function,name = 'h')
integrate(f = binomial_function, lower = 0, upper = 11)
binomial_function <- expression(factorial(n)/(factorial(h)*factorial(n-h))*(theta)^h*(1 - theta)^(n-h))
integrate(f = binomial_function, lower = 0, upper = 11)
integrate(f = binomial_function, lower = 0, upper = 1, h = h, n = n)
binomial_function <- expression(factorial(n)/(factorial(h)*factorial(n-h))*(theta)^h*(1 - theta)^(n-h))
##Specify the values of h, n and other parameters
h <- 4
n <- 10
integrate(f = binomial_function, lower = 0, upper = 1, h = h, n = n)
# Define a function that corresponds to the expression
f <- function(theta, h, n) {
return(factorial(n)/(factorial(h)*factorial(n-h))*(theta)^h*(1 - theta)^(n-h))
}
# Specify the values of h, n and other parameters
h <- 2
n <- 5
# Compute the integral of the function for a given range of theta
result <- integrate(f, lower = 0, upper = 1, h = h, n = n)
# Print the result
print(result$value)
# Compute the integral of the function for a given range of theta
result <- integrate(f, lower = 0, upper = 5, h = h, n = n)
# Print the result
print(result$value)
# Compute the integral of the function for a given range of theta
result <- integrate(f, lower = 0, upper = 1, h = h, n = n)
# Print the result
print(result$value)
# Specify the values of h, n and other parameters
h <- 4
n <- 10
# Compute the integral of the function for a given range of theta
result <- integrate(f, lower = 0, upper = 1, h = h, n = n)
# Print the result
print(result$value)
theta <- 0.5
# Compute the integral of the function for a given range of theta
result <- integrate(f, lower = 0, upper = 1, h = h, n = n)
# Print the result
print(result$value)
# Compute the integral of the function for a given range of theta
result <- integrate(f, h = h, n = n)
prob_distribution
binomial_function <- expression(factorial(n)/(factorial(h)*factorial(n-h))*(theta)^h*(1 - theta)^(n-h))
##Specify the values of h, n and other parameters
h <- 5
n <- 10
theta <- 0.50
binomial_function <- expression(factorial(n)/(factorial(h)*factorial(n-h))*(theta)^h*(1 - theta)^(n-h))
binomial_function
eval(binomial_function)
# Define a function that corresponds to the expression
f <- function(theta, h, n) {
return(factorial(n)/(factorial(h)*factorial(n-h))*(theta)^h*(1 - theta)^(n-h))
}
# Compute the integral of the function for a given range of theta
result <- integrate(f, lower = 0, upper = 1, theta = theta, n = n)
# Print the result
print(result$value)
# Compute the integral of the function for a given range of theta
result <- integrate(f, lower = 0, upper = 11, theta = theta, n = n)
# Print the result
print(result$value)
result
integrate
# Compute the integral of the function for a given range of theta
result <- integrate(f, lower = 5, upper = 5, theta = theta, n = n)
result
# Compute the integral of the function for a given range of theta
result <- integrate(f, lower = 5, upper = 6, theta = theta, n = n)
result
# Compute the integral of the function for a given range of theta
result <- integrate(f, lower = 4.99, upper = 5.01, theta = theta, n = n)
result
#create pmf plot
pmf_plot <- ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_bar() +
geom_rect(inherit.aes = F,
data = rectangle_data, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = 'grey50', color = NA, alpha = 0.2) +
scale_y_continuous(name = bquote(italic("P(h")*"|"*italic(theta == .(prob_success)*","~n == .(num_trials)*")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")"),
breaks = seq(from = 0, to = 10, by = 1)) +
theme_classic(base_family = "Helvetica", base_size = 18) +
theme(axis.title.y = element_text(face = 'italic'),
#embolden the most likely number of heads
axis.text.x =
element_text(face =
ifelse(test = prob_distribution$num_successes == most_likely_number,
no =  "plain",
yes = "bold")),
text = element_text(color = "#002241"),
line = element_line(color = "#002241"),
axis.text = element_text(color = "#002241"))
pmf_plot
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_bar() +
geom_rect(inherit.aes = F,
data = rectangle_data, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = 'grey50', color = NA, alpha = 0.2)
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_bar(stat = 'identity') +  #calculate sum of probability for each num_successes
geom_rect(inherit.aes = F,
data = rectangle_data, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = 'grey50', color = NA, alpha = 0.2)
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_bar(stat = 'identity') +  #calculate sum of probability for each num_successes
geom_rect(inherit.aes = F,
data = rectangle_data, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = 'grey50', color = NA, alpha = 0.2) +
scale_y_continuous(name = bquote(italic("P(h")*"|"*italic(theta == .(prob_success)*","~n == .(num_trials)*")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")"),
breaks = seq(from = 0, to = 10, by = 1)) +
theme_classic(base_family = "Helvetica", base_size = 18) +
theme(axis.title.y = element_text(face = 'italic'),
#embolden the most likely number of heads
axis.text.x =
element_text(face =
ifelse(test = prob_distribution$num_successes == most_likely_number,
no =  "plain",
yes = "bold")),
text = element_text(color = "#002241"),
line = element_line(color = "#002241"),
axis.text = element_text(color = "#002241"))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_bar(stat = 'identity') +  #calculate sum of probability for each num_successes
geom_rect(inherit.aes = F,
data = rectangle_data, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = 'grey50', color = NA, alpha = 0.2) +
scale_y_continuous(name = bquote(italic("P(h")*"|"*italic(theta == .(prob_success)*","~n == .(num_trials)*")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")"),
breaks = seq(from = 0, to = 10, by = 1)) +
theme_classic(base_family = "Helvetica", base_size = 18) +
theme(axis.title.y = element_text(face = 'italic'),
#embolden the most likely number of heads
axis.text.x =
element_text(face =
ifelse(test = prob_distribution$num_successes == most_likely_number,
no =  "plain",
yes = "bold")),
text = element_text(color = "#002241"),
line = element_line(color = "#002241"),
axis.text = element_text(color = "#002241"),
rect = element_rect(color = "#002241"))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_bar(stat = 'identity', fill =  "#002241") +  #calculate sum of probability for each num_successes
geom_rect(inherit.aes = F,
data = rectangle_data, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = 'grey50', color = NA, alpha = 0.2) +
scale_y_continuous(name = bquote(italic("P(h")*"|"*italic(theta == .(prob_success)*","~n == .(num_trials)*")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")"),
breaks = seq(from = 0, to = 10, by = 1)) +
theme_classic(base_family = "Helvetica", base_size = 18) +
theme(axis.title.y = element_text(face = 'italic'),
#embolden the most likely number of heads
axis.text.x =
element_text(face =
ifelse(test = prob_distribution$num_successes == most_likely_number,
no =  "plain",
yes = "bold")),
text = element_text(color = "#002241"),
line = element_line(color = "#002241"),
axis.text = element_text(color = "#002241"))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_bar(stat = 'identity',
fill =  ifelse(test = prob_distribution$num_successes == most_likely_number,
no =  "#002241",
yes = "red")) +  #calculate sum of probability for each num_successes
## geom_rect(inherit.aes = F,
##           data = rectangle_data, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
##           fill = 'grey50', color = NA, alpha = 0.2) +
scale_y_continuous(name = bquote(italic("P(h")*"|"*italic(theta == .(prob_success)*","~n == .(num_trials)*")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")"),
breaks = seq(from = 0, to = 10, by = 1)) +
theme_classic(base_family = "Helvetica", base_size = 18) +
theme(axis.title.y = element_text(face = 'italic'),
#embolden the most likely number of heads
axis.text.x =
element_text(face =
ifelse(test = prob_distribution$num_successes == most_likely_number,
no =  "plain",
yes = "bold")),
text = element_text(color = "#002241"),
line = element_line(color = "#002241"),
axis.text = element_text(color = "#002241"))
#create pmf plot
ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_bar(stat = 'identity',
fill =  ifelse(test = prob_distribution$num_successes == most_likely_number,
no =  "#002241",
yes = "#00182d")) +  #calculate sum of probability for each num_successes
## geom_rect(inherit.aes = F,
##           data = rectangle_data, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
##           fill = 'grey50', color = NA, alpha = 0.2) +
scale_y_continuous(name = bquote(italic("P(h")*"|"*italic(theta == .(prob_success)*","~n == .(num_trials)*")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")"),
breaks = seq(from = 0, to = 10, by = 1)) +
theme_classic(base_family = "Helvetica", base_size = 18) +
theme(axis.title.y = element_text(face = 'italic'),
#embolden the most likely number of heads
axis.text.x =
element_text(face =
ifelse(test = prob_distribution$num_successes == most_likely_number,
no =  "plain",
yes = "bold")),
text = element_text(color = "#002241"),
line = element_line(color = "#002241"),
axis.text = element_text(color = "#002241"))
#create pmf plot
pmf_plot <- ggplot(data = prob_distribution, aes(x = num_successes, y = probability)) +
geom_bar(stat = 'identity',
fill =  ifelse(test = prob_distribution$num_successes == most_likely_number,
no =  "#002241",
yes = "#00182d")) +  #calculate sum of probability for each num_successes
## geom_rect(inherit.aes = F,
##           data = rectangle_data, mapping = aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
##           fill = 'grey50', color = NA, alpha = 0.2) +
scale_y_continuous(name = bquote(italic("P(h")*"|"*italic(theta == .(prob_success)*","~n == .(num_trials)*")"))) +
scale_x_continuous(name = bquote("Number of Heads (i.e., "*italic("h")~")"),
breaks = seq(from = 0, to = 10, by = 1)) +
theme_classic(base_family = "Helvetica", base_size = 18) +
theme(axis.title.y = element_text(face = 'italic'),
#embolden the most likely number of heads
axis.text.x =
element_text(face =
ifelse(test = prob_distribution$num_successes == most_likely_number,
no =  "plain",
yes = "bold")),
text = element_text(color = "#002241"),
line = element_line(color = "#002241"),
axis.text = element_text(color = "#002241"))
ggsave(filename = 'images/pmf_plot.png', plot = pmf_plot, height = 6, width = 8)
sum(prob_distribution$probability >= 0)
sum(prob_distribution$probability)
num_trials <- 10
num_successes <- 7
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_probability_density(num_trials, prob_success, num_successes)
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'RColorBrewer', 'parallel', 'data.table', 'kableExtra', 'ggtext', 'egg', 'papaja', 'shiny',
'ggbrace', 'cowplot', 'knitr', 'RefManageR', 'reticulate', 'gluedown', 'formatR')
libraries(packages)
#use_python(python = "/usr/local/bin/python3.9")
knitr::opts_chunk$set(comment = NA)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
compute_binom_mass_density <- function(num_trials, prob_success, num_successes){
#computation of binomial term (i.e., number of ways of obtaining a given number of successes)
num_success_patterns <- (factorial(num_trials)/(factorial(num_successes)*factorial(num_trials-num_successes)))
#computation of the number of possible ways of obtaining a given number of successes (i.e., heads)
prob_single_pattern <- (prob_success)^num_successes*(1-prob_success)^(num_trials-num_successes)
probability <- num_success_patterns*prob_single_pattern
pmf_df <- data.frame('probability' = probability,
'num_successes' = num_successes,
'prob_success' = prob_success,
'num_trials' = num_trials)
return(pmf_df)
}
num_trials <- 10
num_successes <- 7
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_probability_density(num_trials, prob_success, num_successes)
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
ggplot(data = likelihood_distribution, aes(x = prob_success, y = probability)) +
geom_line() +
scale_y_continuous(name = bquote(paste(L, "(", theta[1], " | ", theta[2] == .(num_trials), ", ", y, ")"))) +
scale_x_continuous(name = bquote(paste("Probability of success (", theta, ")")), breaks = seq(0, 1, 0.1)) +
theme_classic()
num_trials <- 10
num_successes <- 7
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
likelihood_distribution
0.000000e+00
sum(likelihood_distribution$probability)
num_trials <- 10
num_successes <- 1
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
sum(likelihood_distribution$probability)
um_trials <- 10
num_successes <- 0
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
num_trials <- 10
num_successes <- 0
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials,num_successes =  num_successes, prob_success = prob_success)
ggplot(data = likelihood_distribution, aes(x = prob_success, y = probability)) +
geom_line() +
scale_y_continuous(name = bquote(paste(L, "(", theta[1], " | ", theta[2] == .(num_trials), ", ", y, ")"))) +
scale_x_continuous(name = bquote(paste("Probability of success (", theta, ")")), breaks = seq(0, 1, 0.1)) +
theme_classic()
num_trials <- 7:100
num_successes <- 7
prob_success <- 0.5 #manipulated variable
likelihood_distribution <- compute_binom_probability_density(num_trials, prob_success, num_successes)
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials,num_successes =  num_successes, prob_success = prob_success)
ggplot(data = likelihood_distribution, aes(x = prob_success, y = probability)) +
geom_line() +
scale_y_continuous(name = bquote(paste(L, "(", theta[1], " | ", theta[2] == .(num_trials), ", ", y, ")"))) +
scale_x_continuous(name = bquote(paste("Probability of success (", theta, ")")), breaks = seq(0, 1, 0.1)) +
theme_classic()
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials, num_successes =  num_successes, prob_success = prob_success)
likelihood_distribution
num_trials <- 10
num_successes <- 5
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials, num_successes =  num_successes, prob_success = prob_success)
sum(likelihood_distribution$probability)
num_trials <- 10
num_successes <- 0
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials, num_successes =  num_successes, prob_success = prob_success)
sum(likelihood_distribution$probability)
num_trials <- 10
num_successes <- 10
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials, num_successes =  num_successes, prob_success = prob_success)
sum(likelihood_distribution$probability)
.6*.3
0.18+.09+.09
# Define the observed sequence of flips
x <- c("H", "T", "T", "H", "H", "T", "H", "T", "T", "H")
# Define a range of values for p
p <- seq(0, 1, by=0.01)
# Compute the likelihood function for the observed data
L <- prod(p^sum(x=="H") * (1-p)^sum(x=="T"))
# Compute the constant K
K <- choose(10, 5)
# Compute the probability density function for the observed data
P <- K * p^sum(x=="H") * (1-p)^sum(x=="T")
# Plot the likelihood function and the probability density function
plot(p, L * P, type="l", lty=2, xlab="p", ylab="Likelihood * Density")
lines(p, P, type="l", lwd=2, col="red")
L
# Define a range of values for p
p <- seq(0, 1, by=0.01)
prod(p^sum(x=="H") * (1-p)^sum(x=="T"))
num_trials <- 10
num_successes <- 7
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
compute_binom_mass_density(num_trials, prob_success, num_successes)
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
ggplot(data = likelihood_distribution, aes(x = prob_success, y = probability)) +
geom_line() +
scale_y_continuous(name = bquote(paste(L, "(", theta[1], " | ", theta[2] == .(num_trials), ", ", y, ")"))) +
scale_x_continuous(name = bquote(paste("Probability of success (", theta, ")")), breaks = seq(0, 1, 0.1)) +
theme_classic()
likelihood_distribution$probability / prob_distribution$probability
prob_distribution$probabil
prob_distribution$probability
likelihood_distribution$probability
likelihood_distribution$probability[50]
prob_distribution$probability
likelihood_distribution[51]
likelihood_distribution[ ,51]
likelihood_distribution[ ,51]
likelihood_distribution[ ,51]
likelihood_distribution
likelihood_distribution[ 51,]
prob_distribution$probability
num_trials <- 20
num_successes <- 14
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
compute_binom_mass_density(num_trials, prob_success, num_successes)
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
likelihood_distribution[ 51,]
prob_distribution$probability
0.03696442/0.1171875000
num_trials <- 30
num_successes <- 21
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
compute_binom_mass_density(num_trials, prob_success, num_successes)
num_trials <- 30
num_successes <- 21
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
likelihood_distribution[ 51,]
prob_distribution$probability
0.01332457/0.1171875000
likelihood_distribution[ 51,]
0.01332457/0.1171875000
0.03696442/0.1171875000
p <- 0.50
likelihood <- p^6 * (1-p)^4
likelihood
p <- seq(from = 0, to = 1.00, by = 0.01)
likelihood <- p^6 * (1-p)^4
likelihood
sum(likelihood)
sum(likelihood)*210
p <- seq(from = 0, to = 1.00, by = 0.001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)
sum(likelihood)*210
p <- seq(from = 0, to = 1.00, by = 0.001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.00001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.0001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.000001)
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.0000001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.000001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.00001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
incomplete_data_like <- py$incomplete_data_like
lower_bound <- py$lower_bound_df
lower_bound_2 <- py$lower_bound_df_2
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bound, mapping = aes(x = p1, y = likelihood), linewidth = 0.5) +
geom_line(inherit.aes = F, data = lower_bound_2, mapping = aes(x = p1, y = likelihood), linewidth = 0.5) +
scale_x_continuous(breaks = seq(from = 0, to = 1, by = 0.1)) +
theme_classic(base_family = 'Helvetica')
reticulate::repl_python()
quit
incomplete_data_like <- py$incomplete_data_like
lower_bound <- py$lower_bound_df
lower_bound_2 <- py$lower_bound_df_2
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bound, mapping = aes(x = p1, y = likelihood), linewidth = 0.5) +
geom_line(inherit.aes = F, data = lower_bound_2, mapping = aes(x = p1, y = likelihood), linewidth = 0.5) +
scale_x_continuous(breaks = seq(from = 0, to = 1, by = 0.1)) +
theme_classic(base_family = 'Helvetica')
reticulate::repl_python()
