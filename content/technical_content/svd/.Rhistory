}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#create and use conda environment
#conda_create(envname = 'blog_posts',  python_version = '3.10.11')
use_condaenv(condaenv = 'blog_posts')
#install packages in conda environment
#py_packages <- c('numpy', 'pandas', 'scikit-learn', "plotnine", "statsmodels", "smltheory")
#conda_install(envname = 'blog_posts', packages = 'manim', pip=T)
#install_tensorflow(method = 'conda', envname = 'blog_posts')#can take long time (~10 minutes)
#useful for checking what packages are loaded
#py_list_packages(envname = 'blog_posts', type = 'conda')
#pandoc content/technical_content/understanding_ML/refs.bib -t csljson -o content/technical_content/understanding_ML/refs.json
reticulate::repl_python()
reticulate::repl_python()
15 + 17 + 14.5 + -30 - 26 + 19
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
15 + 25 + 44 + 15 + 24 + 40
163 + 44.58 + 45.20 + 12.45 + 5.64 + 44.58  + 21.05 + 11.29 + 10.79 + 67 + 1.4 + 27.07 + 52.67 + 2.72+ 17.93 + 36.81 + 51.34 + 6.78 + 26.54
648.84 + 200
1,462.93 + 52.99
1462.93 + 52.99
109.27/1515.92
286/323
237/268
114.86/(1505.93+52.99)
114.86/787.50
114.86/(787.50+43.00 + 52.99)
1.13*787/50
1.13*787.50
216.8/260.20
3/12 * 72
61/12
9*5.083333
36.28 + 18.28
62.29 + 222
62.29 + 22
80/ 12
6.666667*9
36.56+18.28
54.84 + 15
62.29 - 18.28 - 36.56
7.45 - 15
7.55 + 49.49
62.29 + 64.49
126.78 - 15 - 36.56 - 18.28
62.29 - 36.56 - 18.28
7.45+28.49
35.94/8.20
35.94 - 8.20
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
#load packages
library(easypackages)
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'ggforce', 'latex2exp', 'ggbrace', "ordr")
libraries(packages)
knitr::opts_chunk$set(comment = NA, echo = TRUE, eval = TRUE, warning = FALSE, message=FALSE)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#create and use conda environment
#conda_create(envname = 'blog_posts',  python_version = '3.10.11')
use_condaenv(condaenv = 'blog_posts')
reticulate::repl_python()
library(tidyverse)
library(Matrix)
# generate data for first group of wine drinkers
means_dwd = c(81, 82, 68, 69)
means_cwd = c(63, 61, 83, 83)
sd = rep(x = 3, times=4)
# create covariance matrix
cor_var_12 <-  .75
cor_var_34 <-  .75
cor_var_13 <- 0
cor_var_14 <- cor_var_13
cor_var_23 <- cor_var_13
cor_var_24 <- cor_var_13
# covariance for dinner wine drinkers
cov <- diag(sd^2)
cov[2, 1] <- cor_var_12 * sd[1]^2
cov[3, 1] <- cor_var_13 * sd[1]^2
cov[3, 2] <- cor_var_23 * sd[1]^2
cov[4, 1] <- cor_var_14 * sd[1]^2
cov[4, 2] <- cor_var_24 * sd[1]^2
cov[4, 3] <- cor_var_34 * sd[1]^2
# covariance for celebratory wine drinkers
cov_cwd <- diag(sd^2)
cov_cwd[4, 3] <- cor_var_12 * sd[1]^2
cov_cwd[3, 1] <- cor_var_13 * sd[1]^2
cov_cwd[3, 2] <- cor_var_23 * sd[1]^2
cov_cwd[4, 1] <- cor_var_14 * sd[1]^2
cov_cwd[4, 2] <- cor_var_24 * sd[1]^2
cov_cwd[2, 1] <- cor_var_34 * sd[1]^2
cov_cwd[upper.tri(cov_cwd)] <- t(cov_cwd)[upper.tri(cov_cwd)]
# Number of samples
n <- 5
set.seed(27)
df_dwd = round(MASS::mvrnorm(n = n, mu = means_dwd, Sigma = cov, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_cwd = round(MASS::mvrnorm(n = n, mu = means_cwd, Sigma = cov_cwd, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_wine_drinkers <- rbind(df_dwd, df_cwd)
cor(df_wine_drinkers)
df_std = scale(df_wine_drinkers, center=T, scale=T)
# write data set
df_wine_drinkers
write.csv(df_wine_drinkers, 'data_wine_drinkers.csv')
# svd
A_center <- scale(df_wine_drinkers, center=T, scale=F)
A_std <- scale(df_wine_drinkers, center=T, scale=T)
# Step 1) Compute covariance matrix
# varimax applied on svd output
svd_result <- svd(A_center)
U <- svd_result$u  # Left singular vectors
S <- svd_result$d  # Singular values
V <- svd_result$v  # Right singular vectors
loadings <- V %*% diag(S)
# Step 4: Optional - Normalize the loadings
# To match typical PCA output (where loadings are in the range -1 to 1), you can scale them if necessary
loadings_normalized <- scale(V)
varimax(loadings_normalized, normalize = F)
# Step 2. Compute loadings A. May skip if you don't need to interpret PCs anyhow.
# Loadings are eigenvectors normalized to respective eigenvalues: A value = V value * sqrt(L value)
# Loadings are the covariances between variables and components.
# PCA
pca_result2varimax<- psych::principal(r = df_wine_drinkers,
rotate = "none",
n.obs = 10,
nfactors = 2,
scores = T,
oblique.scores = T)
pca_result2varimax$communality
pca_result2varimax$Vaccounted
loadings_pca <- pca_result2varimax$loadings
pca_result2varimax$values
myloadings2 <- data.frame(PC1 = pca_result2varimax$loadings[,1], PC2 = pca_result2varimax$loadings[,2])
myloadings2$rot = "varimax"
pc_scores <- data.frame(PC1 = pca_result2varimax$scores[,1], PC2 = pca_result2varimax$scores[,2])
pc_scores$rot = "varimax"
library(ggplot2)
ggplot(data = myloadings2, mapping = aes(x = PC1, y = PC2, color = rot)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) + geom_vline(xintercept  = 0)
# svd visualization
df_mat = matrix(data = c(1, 2,
3, 1,
2, 3), byrow=F, nrow=2)
svd(x = df_mat)
library(ggplot2)
ggplot(data = myloadings2, mapping = aes(x = PC1, y = PC2, color = rot)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) + geom_vline(xintercept  = 0)
reticulate::repl_python()
reticulate::repl_python()
library(tidyverse)
library(Matrix)
# set means of each variable for dinner and celebratory wine drinkers (dwd, cwd)
means_dwd = c(81, 82, 68, 69)
means_cwd = c(63, 61, 83, 83)
sd = rep(x = 3, times=4)
# create covariance matrix
cor_var_12 <-  .75
cor_var_34 <-  .75
cor_var_13 <- 0
cor_var_14 <- cor_var_13
cor_var_23 <- cor_var_13
cor_var_24 <- cor_var_13
# covariance for dinner wine drinkers
cov <- diag(sd^2)
cov[2, 1] <- cor_var_12 * sd[1]^2
cov[3, 1] <- cor_var_13 * sd[1]^2
cov[3, 2] <- cor_var_23 * sd[1]^2
cov[4, 1] <- cor_var_14 * sd[1]^2
cov[4, 2] <- cor_var_24 * sd[1]^2
cov[4, 3] <- cor_var_34 * sd[1]^2
# covariance for celebratory wine drinkers
cov_cwd <- diag(sd^2)
cov_cwd[4, 3] <- cor_var_12 * sd[1]^2
cov_cwd[3, 1] <- cor_var_13 * sd[1]^2
cov_cwd[3, 2] <- cor_var_23 * sd[1]^2
cov_cwd[4, 1] <- cor_var_14 * sd[1]^2
cov_cwd[4, 2] <- cor_var_24 * sd[1]^2
cov_cwd[2, 1] <- cor_var_34 * sd[1]^2
cov_cwd[upper.tri(cov_cwd)] <- t(cov_cwd)[upper.tri(cov_cwd)]
# Number of samples
n <- 5
set.seed(27)
df_dwd = round(MASS::mvrnorm(n = n, mu = means_dwd, Sigma = cov, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_cwd = round(MASS::mvrnorm(n = n, mu = means_cwd, Sigma = cov_cwd, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_wine_drinkers <- rbind(df_dwd, df_cwd)
reticulate::repl_python()
library(tidyverse)
library(Matrix)
# set means of each variable for dinner and celebratory wine drinkers (dwd, cwd)
means_dwd = c(81, 82, 68, 69)
means_cwd = c(63, 61, 83, 83)
sd = rep(x = 3, times=4)
# create covariance matrix
cor_var_12 <-  .75
cor_var_34 <-  .75
cor_var_13 <- 0
cor_var_14 <- cor_var_13
cor_var_23 <- cor_var_13
cor_var_24 <- cor_var_13
# covariance for dinner wine drinkers
cov <- diag(sd^2)
cov[2, 1] <- cor_var_12 * sd[1]^2
cov[3, 1] <- cor_var_13 * sd[1]^2
cov[3, 2] <- cor_var_23 * sd[1]^2
cov[4, 1] <- cor_var_14 * sd[1]^2
cov[4, 2] <- cor_var_24 * sd[1]^2
cov[4, 3] <- cor_var_34 * sd[1]^2
# covariance for celebratory wine drinkers
cov_cwd <- diag(sd^2)
cov_cwd[4, 3] <- cor_var_12 * sd[1]^2
cov_cwd[3, 1] <- cor_var_13 * sd[1]^2
cov_cwd[3, 2] <- cor_var_23 * sd[1]^2
cov_cwd[4, 1] <- cor_var_14 * sd[1]^2
cov_cwd[4, 2] <- cor_var_24 * sd[1]^2
cov_cwd[2, 1] <- cor_var_34 * sd[1]^2
cov_cwd[upper.tri(cov_cwd)] <- t(cov_cwd)[upper.tri(cov_cwd)]
# Number of samples
n <- 5
set.seed(27)
df_dwd = round(MASS::mvrnorm(n = n, mu = means_dwd, Sigma = cov, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_cwd = round(MASS::mvrnorm(n = n, mu = means_cwd, Sigma = cov_cwd, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_wine_drinkers <- rbind(df_dwd, df_cwd)
reticulate::repl_python()
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'ggforce', 'latex2exp', 'ggbrace', "ordr", "kableExtra")
libraries(packages)
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'ggforce', 'latex2exp', 'ggbrace', "ordr", "kableExtra")
libraries(packages)
knitr::opts_chunk$set(comment = NA, echo = TRUE, eval = TRUE, warning = FALSE, message=FALSE)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#create and use conda environment
#conda_create(envname = 'blog_posts',  python_version = '3.10.11')
use_condaenv(condaenv = 'blog_posts')
reticulate::repl_python()
#install packages in conda environment
#py_packages <- c('numpy', 'pandas', 'scikit-learn', "plotnine", "statsmodels", "smltheory")
#conda_install(envname = 'blog_posts', packages = 'manim', pip=T)
#install_tensorflow(method = 'conda', envname = 'blog_posts')#can take long time (~10 minutes)
#useful for checking what packages are loaded
#py_list_packages(envname = 'blog_posts', type = 'conda')
# convert .bib to .json
# pandoc content/technical_content/svd/refs.bib -t csljson -o content/technical_content/svd/refs.json
reticulate::repl_python()
library(tidyverse)
library(Matrix)
# set means of each variable for dinner and celebratory wine drinkers (dwd, cwd)
means_dwd = c(81, 82, 68, 69)
means_cwd = c(63, 61, 83, 83)
sd = rep(x = 3, times=4)
# create covariance matrix
cor_var_12 <-  .75
cor_var_34 <-  .75
cor_var_13 <- 0
cor_var_14 <- cor_var_13
cor_var_23 <- cor_var_13
cor_var_24 <- cor_var_13
# covariance for dinner wine drinkers
cov <- diag(sd^2)
cov[2, 1] <- cor_var_12 * sd[1]^2
cov[3, 1] <- cor_var_13 * sd[1]^2
cov[3, 2] <- cor_var_23 * sd[1]^2
cov[4, 1] <- cor_var_14 * sd[1]^2
cov[4, 2] <- cor_var_24 * sd[1]^2
cov[4, 3] <- cor_var_34 * sd[1]^2
# covariance for celebratory wine drinkers
cov_cwd <- diag(sd^2)
cov_cwd[4, 3] <- cor_var_12 * sd[1]^2
cov_cwd[3, 1] <- cor_var_13 * sd[1]^2
cov_cwd[3, 2] <- cor_var_23 * sd[1]^2
cov_cwd[4, 1] <- cor_var_14 * sd[1]^2
cov_cwd[4, 2] <- cor_var_24 * sd[1]^2
cov_cwd[2, 1] <- cor_var_34 * sd[1]^2
cov_cwd[upper.tri(cov_cwd)] <- t(cov_cwd)[upper.tri(cov_cwd)]
# Number of samples
n <- 5
set.seed(27)
df_dwd = round(MASS::mvrnorm(n = n, mu = means_dwd, Sigma = cov, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_cwd = round(MASS::mvrnorm(n = n, mu = means_cwd, Sigma = cov_cwd, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_wine_drinkers <- rbind(df_dwd, df_cwd)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'ggforce', 'latex2exp', 'ggbrace', "ordr", "kableExtra")
libraries(packages)
reticulate::repl_python()
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'ggforce', 'latex2exp', 'ggbrace', "ordr", "kableExtra")
libraries(packages)
reticulate::repl_python()
1196 + 1500 + 500 + 400 + 300 + 1000 + 900
reticulate::repl_python()
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'ggforce', 'latex2exp', 'ggbrace', "ordr", "kableExtra")
libraries(packages)
reticulate::repl_python()
kbl(py$df_varimax, booktabs = TRUE, format = 'html',
align = c('l', 'c', 'c'),
caption = 'Varimax-Rotated Loadings of Each Wine on Each Principal Axis',
escape = F,
table.attr = "style='width:300px;'") %>%
kable_styling(position = 'center') %>%
column_spec(column = c(2,3), width = "75px") %>%
add_header_above(c(" " = 1, "Wine Drinking Preferece" = 2))
kbl(py$df_varimax, booktabs = TRUE, format = 'html',
align = c('l', 'c', 'c'),
caption = 'Varimax-Rotated Loadings of Each Wine on Each Principal Axis',
escape = F,
table.attr = "style='width:300px;'") %>%
kable_styling(position = 'center') %>%
column_spec(column = c(2,3), width = "75px") %>%
add_header_above(c(" " = 1, "Wine Drinking Preferece" = 2))
kbl(py$df_varimax, booktabs = TRUE, format = 'html',
align = c('l', 'c', 'c'),
caption = 'Varimax-Rotated Loadings of Each Wine on Each Principal Axis',
escape = F,
table.attr = "style='width:300px;'") %>%
kable_styling(position = 'center') %>%
column_spec(column = c(2,3), width = "75px") %>%
add_header_above(c(" " = 1, "Wine Drinking Preferece" = 2))
kbl(py$df_varimax, booktabs = TRUE, format = 'html',
align = c('l', 'c', 'c'),
caption = 'Varimax-Rotated Loadings of Each Wine on Each Principal Axis',
escape = F,
table.attr = "style='width:300px;'") %>%
kable_styling(position = 'center') %>%
column_spec(column = c(2,3), width = "75px") %>%
add_header_above(c(" " = 1, "Wine Drinking Preferece" = 2))
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'ggforce', 'latex2exp', 'ggbrace', "ordr", "kableExtra")
libraries(packages)
knitr::opts_chunk$set(comment = NA, echo = TRUE, eval = TRUE, warning = FALSE, message=FALSE)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#create and use conda environment
#conda_create(envname = 'blog_posts',  python_version = '3.10.11')
use_condaenv(condaenv = 'blog_posts')
kbl(py$df_varimax, booktabs = TRUE, format = 'html',
align = c('l', 'c', 'c'),
caption = 'Varimax-Rotated Loadings of Each Wine on Each Principal Axis',
escape = F,
table.attr = "style='width:300px;'") %>%
kable_styling(position = 'center') %>%
column_spec(column = c(2,3), width = "75px") %>%
add_header_above(c(" " = 1, "Wine Drinking Preferece" = 2))
kbl(py$df_varimax, booktabs = TRUE, format = 'html',
align = c('l', 'c', 'c'),
caption = 'Varimax-Rotated Loadings of Each Wine on Each Principal Axis',
escape = F,
table.attr = "style='width:300px;'") %>%
kable_styling(position = 'center') %>%
column_spec(column = c(2,3), width = "75px") %>%
add_header_above(c(" " = 1, "Wine Drinking Preferece" = 2))
reticulate::repl_python()
kbl(py$df_varimax, booktabs = TRUE, format = 'html',
align = c('l', 'c', 'c'),
caption = 'Varimax-Rotated Loadings of Each Wine on Each Principal Axis',
escape = F,
table.attr = "style='width:300px;'") %>%
kable_styling(position = 'center') %>%
column_spec(column = c(2,3), width = "75px") %>%
add_header_above(c(" " = 1, "Wine Drinking Preferece" = 2))
reticulate::repl_python()
