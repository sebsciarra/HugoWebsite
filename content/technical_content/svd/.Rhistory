res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#create and use conda environment
#conda_create(envname = 'blog_posts',  python_version = '3.10.11')
use_condaenv(condaenv = 'blog_posts')
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'ggforce', 'latex2exp', 'ggbrace', "ordr")
libraries(packages)
knitr::opts_chunk$set(comment = NA, echo = TRUE, eval = TRUE, warning = FALSE, message=FALSE)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#create and use conda environment
#conda_create(envname = 'blog_posts',  python_version = '3.10.11')
use_condaenv(condaenv = 'blog_posts')
#install packages in conda environment
#py_packages <- c('numpy', 'pandas', 'scikit-learn', "plotnine", "statsmodels", "smltheory")
#conda_install(envname = 'blog_posts', packages = 'manim', pip=T)
#install_tensorflow(method = 'conda', envname = 'blog_posts')#can take long time (~10 minutes)
#useful for checking what packages are loaded
#py_list_packages(envname = 'blog_posts', type = 'conda')
#pandoc content/technical_content/understanding_ML/refs.bib -t csljson -o content/technical_content/understanding_ML/refs.json
reticulate::repl_python()
library(tidyverse)
library(Matrix)
# generate data for first group of wine drinkers
means_dwd = c(81, 82, 58, 59)
means_cwd = c(63, 61, 83, 83)
sd = rep(x = 3, times=4)
# create covariance matrix
cor_var_12 <-  .75
cor_var_34 <-  .75
cor_var_13 <- 0
cor_var_14 <- cor_var_13
cor_var_23 <- cor_var_13
cor_var_24 <- cor_var_13
# covariance for dinner wine drinkers
cov <- diag(sd^2)
cov[2, 1] <- cor_var_12 * sd[1]^2
cov[3, 1] <- cor_var_13 * sd[1]^2
cov[3, 2] <- cor_var_23 * sd[1]^2
cov[4, 1] <- cor_var_14 * sd[1]^2
cov[4, 2] <- cor_var_24 * sd[1]^2
cov[4, 3] <- cor_var_34 * sd[1]^2
# covariance for celebratory wine drinkers
cov_cwd <- diag(sd^2)
cov_cwd[4, 3] <- cor_var_12 * sd[1]^2
cov_cwd[3, 1] <- cor_var_13 * sd[1]^2
cov_cwd[3, 2] <- cor_var_23 * sd[1]^2
cov_cwd[4, 1] <- cor_var_14 * sd[1]^2
cov_cwd[4, 2] <- cor_var_24 * sd[1]^2
cov_cwd[2, 1] <- cor_var_34 * sd[1]^2
cov_cwd[upper.tri(cov_cwd)] <- t(cov_cwd)[upper.tri(cov_cwd)]
# Number of samples
n <- 10
set.seed(27)
df_dwd = round(MASS::mvrnorm(n = n, mu = means_dwd, Sigma = cov, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_cwd = round(MASS::mvrnorm(n = n, mu = means_cwd, Sigma = cov_cwd, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_wine_drinkers <- rbind(df_dwd, df_cwd)
cor_matrix = cor(df_wine_drinkers)
df_std = scale(df_wine_drinkers, center=T, scale=T)
# svd
pca_result2varimax<- psych::principal(r = df_std,
rotate = "varimax",
n.obs = 20,
nfactors = 2,
scores = TRUE,
oblique.scores = F, )
loadings <- pca_result2varimax$loadings
loadings
pca_result2varimax$scores
for (i in 1:(2*n)) {
if (i <= 10) {
# Modify individuals to load highly on PC1
df_wine_drinkers[i,] <- df_wine_drinkers[i,] %*% loadings[, 2] %*% t(loadings[, 2])
} else {
# Modify individuals to load highly on PC2
df_wine_drinkers[i,] <- df_wine_drinkers[i,] %*% loadings[, 1] %*% t(loadings[, 1])
}
}
df_std = scale(df_wine_drinkers, center=T, scale=T)
# svd
pca_result2varimax<- psych::principal(r = df_std,
rotate = "varimax",
n.obs = 20,
nfactors = 2,
scores = TRUE,
oblique.scores = F, )
pca_result2varimax$scores
df_wine_drinkers
cor(df_wine_drinkers)
library(tidyverse)
library(Matrix)
# generate data for first group of wine drinkers
means_dwd = c(81, 82, 58, 59)
means_cwd = c(63, 61, 83, 83)
sd = rep(x = 3, times=4)
# create covariance matrix
cor_var_12 <-  .75
cor_var_34 <-  .75
cor_var_13 <- 0
cor_var_14 <- cor_var_13
cor_var_23 <- cor_var_13
cor_var_24 <- cor_var_13
# covariance for dinner wine drinkers
cov <- diag(sd^2)
cov[2, 1] <- cor_var_12 * sd[1]^2
cov[3, 1] <- cor_var_13 * sd[1]^2
cov[3, 2] <- cor_var_23 * sd[1]^2
cov[4, 1] <- cor_var_14 * sd[1]^2
cov[4, 2] <- cor_var_24 * sd[1]^2
cov[4, 3] <- cor_var_34 * sd[1]^2
# covariance for celebratory wine drinkers
cov_cwd <- diag(sd^2)
cov_cwd[4, 3] <- cor_var_12 * sd[1]^2
cov_cwd[3, 1] <- cor_var_13 * sd[1]^2
cov_cwd[3, 2] <- cor_var_23 * sd[1]^2
cov_cwd[4, 1] <- cor_var_14 * sd[1]^2
cov_cwd[4, 2] <- cor_var_24 * sd[1]^2
cov_cwd[2, 1] <- cor_var_34 * sd[1]^2
cov_cwd[upper.tri(cov_cwd)] <- t(cov_cwd)[upper.tri(cov_cwd)]
# Number of samples
n <- 10
set.seed(27)
df_dwd = round(MASS::mvrnorm(n = n, mu = means_dwd, Sigma = cov, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_cwd = round(MASS::mvrnorm(n = n, mu = means_cwd, Sigma = cov_cwd, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_wine_drinkers <- rbind(df_dwd, df_cwd)
cor(df_wine_drinkers)
df_std = scale(df_wine_drinkers, center=T, scale=T)
# Load necessary library
library(MASS)  # For multivariate normal data generation
# Set random seed for reproducibility
set.seed(123)
# Step 1: Generate latent factors
n <- 100  # Number of individuals
latent_factor1 <- rnorm(n)  # Latent factor 1 (PC1)
latent_factor2 <- rnorm(n)  # Latent factor 2 (PC2)
# Step 2: Create observed variables as linear combinations of latent factors
# Define weights for the observed variables on the latent factors
# Variables 1 and 2 load more on latent_factor1
# Variables 3 and 4 load more on latent_factor2
var1 <- 0.8 * latent_factor1 + 0.2 * latent_factor2 + rnorm(n, sd = 0.1)  # Mostly PC1
var2 <- 0.7 * latent_factor1 + 0.3 * latent_factor2 + rnorm(n, sd = 0.1)  # Mostly PC1
var3 <- 0.2 * latent_factor1 + 0.8 * latent_factor2 + rnorm(n, sd = 0.1)  # Mostly PC2
var4 <- 0.3 * latent_factor1 + 0.7 * latent_factor2 + rnorm(n, sd = 0.1)  # Mostly PC2
# Combine into a data frame
data <- data.frame(var1, var2, var3, var4)
# Step 3: Perform PCA
pca_result <- prcomp(data, scale = TRUE)
# Step 4: Check the variance explained by each PC
summary(pca_result)
# Step 5: Plot individuals in PC1 vs PC2 space to visualize loading pattern
plot(pca_result$x[, 1], pca_result$x[, 2],
xlab = "PC1", ylab = "PC2", main = "Individuals in PC1 vs PC2 Space",
col = ifelse(abs(pca_result$x[, 1]) > abs(pca_result$x[, 2]), "blue", "red"))
legend("topright", legend=c("High PC1", "High PC2"), col=c("blue", "red"), pch=1)
Explanation:
loadings
pca_result2varimax<- psych::principal(r = df_std,
rotate = "varimax",
n.obs = 20,
nfactors = 2,
scores = TRUE,
oblique.scores = F, )
loadings <- pca_result2varimax$loadings
myloadings2 <- data.frame(PC1 = pca_result2varimax$loadings[,1], PC2 = pca_result2varimax$loadings[,2])
myloadings2$rot = "varimax"
pc_scores <- data.frame(PC1 = pca_result2varimax$scores[,1], PC2 = pca_result2varimax$scores[,2])
pc_scores$rot = "varimax"
library(ggplot2)
ggplot(data = pc_scores, mapping = aes(x = PC1, y = PC2, color = rot)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) + geom_vline(xintercept  = 0)
cor(df_wine_drinkers)
ggplot(data = myloadings2, mapping = aes(x = PC1, y = PC2, color = rot)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) + geom_vline(xintercept  = 0)
df_wine_drinkers
# generate data for first group of wine drinkers
means_dwd = c(81, 82, 30, 31)
means_cwd = c(63, 61, 83, 83)
sd = rep(x = 3, times=4)
# create covariance matrix
cor_var_12 <-  .75
cor_var_34 <-  .75
cor_var_13 <- 0
cor_var_14 <- cor_var_13
cor_var_23 <- cor_var_13
cor_var_24 <- cor_var_13
# covariance for dinner wine drinkers
cov <- diag(sd^2)
cov[2, 1] <- cor_var_12 * sd[1]^2
cov[3, 1] <- cor_var_13 * sd[1]^2
cov[3, 2] <- cor_var_23 * sd[1]^2
cov[4, 1] <- cor_var_14 * sd[1]^2
cov[4, 2] <- cor_var_24 * sd[1]^2
cov[4, 3] <- cor_var_34 * sd[1]^2
# covariance for celebratory wine drinkers
cov_cwd <- diag(sd^2)
cov_cwd[4, 3] <- cor_var_12 * sd[1]^2
cov_cwd[3, 1] <- cor_var_13 * sd[1]^2
cov_cwd[3, 2] <- cor_var_23 * sd[1]^2
cov_cwd[4, 1] <- cor_var_14 * sd[1]^2
cov_cwd[4, 2] <- cor_var_24 * sd[1]^2
cov_cwd[2, 1] <- cor_var_34 * sd[1]^2
cov_cwd[upper.tri(cov_cwd)] <- t(cov_cwd)[upper.tri(cov_cwd)]
# Number of samples
n <- 10
set.seed(27)
df_dwd = round(MASS::mvrnorm(n = n, mu = means_dwd, Sigma = cov, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_cwd = round(MASS::mvrnorm(n = n, mu = means_cwd, Sigma = cov_cwd, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_wine_drinkers <- rbind(df_dwd, df_cwd)
cor(df_wine_drinkers)
df_std = scale(df_wine_drinkers, center=T, scale=T)
# svd
pca_result2varimax<- psych::principal(r = df_std,
rotate = "varimax",
n.obs = 20,
nfactors = 2,
scores = TRUE,
oblique.scores = F, )
loadings <- pca_result2varimax$loadings
myloadings2 <- data.frame(PC1 = pca_result2varimax$loadings[,1], PC2 = pca_result2varimax$loadings[,2])
myloadings2$rot = "varimax"
pc_scores <- data.frame(PC1 = pca_result2varimax$scores[,1], PC2 = pca_result2varimax$scores[,2])
pc_scores$rot = "varimax"
library(ggplot2)
ggplot(data = pc_scores, mapping = aes(x = PC1, y = PC2, color = rot)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) + geom_vline(xintercept  = 0)
pc_scores
cbind(df_wine_drinkers, pc_scores)
45.20 + 27.11 + 144 + 43.42 + 16.24 + 238.49 + 1.37 + 19.2 + 7.11 + 13.61 + 13 + 33.67 + 19.95 + 3.48 + 35.95 + 3.08 + 19.48 + 32.95 + 2.72
720.03 + 164 + 150
1034.03 + 66.67 + 43 + 10 -25 - 145 + 15 + 35.72 + 60 - 46
1048.42 + 30 + 12.42 + 502
1048.42 + 30 + 12.42 + 50
?psych::principal
pca_result2varimax<- psych::principal(r = df_std,
rotate = "oblimin",
n.obs = 20,
nfactors = 2,
scores = TRUE,
oblique.scores = F, )
loadings <- pca_result2varimax$loadings
myloadings2 <- data.frame(PC1 = pca_result2varimax$loadings[,1], PC2 = pca_result2varimax$loadings[,2])
myloadings2$rot = "varimax"
pc_scores <- data.frame(PC1 = pca_result2varimax$scores[,1], PC2 = pca_result2varimax$scores[,2])
pc_scores$rot = "varimax"
library(ggplot2)
ggplot(data = myloadings2, mapping = aes(x = PC1, y = PC2, color = rot)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) + geom_vline(xintercept  = 0)
ggplot(data = pc_scores, mapping = aes(x = PC1, y = PC2, color = rot)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) + geom_vline(xintercept  = 0)
library(tidyverse)
library(Matrix)
# generate data for first group of wine drinkers
means_dwd = c(81, 82, 58, 59)
means_cwd = c(63, 61, 83, 83)
sd = rep(x = 3, times=4)
# create covariance matrix
cor_var_12 <-  .75
cor_var_34 <-  .75
cor_var_13 <- 0
cor_var_14 <- cor_var_13
cor_var_23 <- cor_var_13
cor_var_24 <- cor_var_13
# covariance for dinner wine drinkers
cov <- diag(sd^2)
cov[2, 1] <- cor_var_12 * sd[1]^2
cov[3, 1] <- cor_var_13 * sd[1]^2
cov[3, 2] <- cor_var_23 * sd[1]^2
cov[4, 1] <- cor_var_14 * sd[1]^2
cov[4, 2] <- cor_var_24 * sd[1]^2
cov[4, 3] <- cor_var_34 * sd[1]^2
# covariance for celebratory wine drinkers
cov_cwd <- diag(sd^2)
cov_cwd[4, 3] <- cor_var_12 * sd[1]^2
cov_cwd[3, 1] <- cor_var_13 * sd[1]^2
cov_cwd[3, 2] <- cor_var_23 * sd[1]^2
cov_cwd[4, 1] <- cor_var_14 * sd[1]^2
cov_cwd[4, 2] <- cor_var_24 * sd[1]^2
cov_cwd[2, 1] <- cor_var_34 * sd[1]^2
cov_cwd[upper.tri(cov_cwd)] <- t(cov_cwd)[upper.tri(cov_cwd)]
# Number of samples
n <- 10
set.seed(27)
df_dwd = round(MASS::mvrnorm(n = n, mu = means_dwd, Sigma = cov, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_cwd = round(MASS::mvrnorm(n = n, mu = means_cwd, Sigma = cov_cwd, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_wine_drinkers <- rbind(df_dwd, df_cwd)
cor(df_wine_drinkers)
df_std = scale(df_wine_drinkers, center=T, scale=T)
# svd
pca_result2varimax<- psych::principal(r = df_std,
rotate = "oblimin",
n.obs = 20,
nfactors = 2,
scores = TRUE,
oblique.scores = F, )
loadings <- pca_result2varimax$loadings
loadings
pca_result2varimax<- psych::principal(r = df_std,
rotate = "varimax",
n.obs = 20,
nfactors = 2,
scores = TRUE,
oblique.scores = F, )
loadings <- pca_result2varimax$loadings
loadings
pca_result2varimax$scores[,1],
pca_result2varimax$scores
cbind(df_wine_drinkers, pc_scores)
# svd
pca_result2varimax<- psych::principal(r = df_std,
rotate = "varimax",
n.obs = 20,
nfactors = 2,
scores = TRUE,
oblique.scores = T )
pc_scores <- data.frame(PC1 = pca_result2varimax$scores[,1], PC2 = pca_result2varimax$scores[,2])
pc_scores$rot = "varimax"
cbind(df_wine_drinkers, pc_scores)
pca_result2varimax<- psych::principal(r = df_wine_drinkers,
rotate = "varimax",
n.obs = 20,
nfactors = 2,
scores = TRUE,
oblique.scores = T )
loadings <- pca_result2varimax$loadings
myloadings2 <- data.frame(PC1 = pca_result2varimax$loadings[,1], PC2 = pca_result2varimax$loadings[,2])
myloadings2$rot = "varimax"
pc_scores <- data.frame(PC1 = pca_result2varimax$scores[,1], PC2 = pca_result2varimax$scores[,2])
pc_scores$rot = "varimax"
cbind(df_wine_drinkers, pc_scores)
cbind(df_std, pc_scores)
cbind(df_std, pc_scores)
df_wine_drinkers
loadings
df_std
cbind(df_wine_drinkers, pc_scores)
means_dwd = c(81, 82, 68, 69)
means_cwd = c(63, 61, 83, 83)
sd = rep(x = 3, times=4)
# create covariance matrix
cor_var_12 <-  .75
cor_var_34 <-  .75
cor_var_13 <- 0
cor_var_14 <- cor_var_13
cor_var_23 <- cor_var_13
cor_var_24 <- cor_var_13
# covariance for dinner wine drinkers
cov <- diag(sd^2)
cov[2, 1] <- cor_var_12 * sd[1]^2
cov[3, 1] <- cor_var_13 * sd[1]^2
cov[3, 2] <- cor_var_23 * sd[1]^2
cov[4, 1] <- cor_var_14 * sd[1]^2
cov[4, 2] <- cor_var_24 * sd[1]^2
cov[4, 3] <- cor_var_34 * sd[1]^2
# covariance for celebratory wine drinkers
cov_cwd <- diag(sd^2)
cov_cwd[4, 3] <- cor_var_12 * sd[1]^2
cov_cwd[3, 1] <- cor_var_13 * sd[1]^2
cov_cwd[3, 2] <- cor_var_23 * sd[1]^2
cov_cwd[4, 1] <- cor_var_14 * sd[1]^2
cov_cwd[4, 2] <- cor_var_24 * sd[1]^2
cov_cwd[2, 1] <- cor_var_34 * sd[1]^2
cov_cwd[upper.tri(cov_cwd)] <- t(cov_cwd)[upper.tri(cov_cwd)]
# Number of samples
n <- 10
set.seed(27)
df_dwd = round(MASS::mvrnorm(n = n, mu = means_dwd, Sigma = cov, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_cwd = round(MASS::mvrnorm(n = n, mu = means_cwd, Sigma = cov_cwd, empirical = T) + rnorm(n = n, mean = 0, sd = 10))
df_wine_drinkers <- rbind(df_dwd, df_cwd)
df_wine_drinkers
df_wine_drinkers <- rbind(df_dwd, df_cwd)
cor(df_wine_drinkers)
df_std = scale(df_wine_drinkers, center=T, scale=T)
# svd
pca_result2varimax<- psych::principal(r = df_wine_drinkers,
rotate = "varimax",
n.obs = 20,
nfactors = 2,
scores = TRUE,
oblique.scores = T )
loadings <- pca_result2varimax$loadings
loadings
myloadings2 <- data.frame(PC1 = pca_result2varimax$loadings[,1], PC2 = pca_result2varimax$loadings[,2])
myloadings2$rot = "varimax"
pc_scores <- data.frame(PC1 = pca_result2varimax$scores[,1], PC2 = pca_result2varimax$scores[,2])
pc_scores$rot = "varimax"
cbind(df_wine_drinkers, pc_scores)
library(ggplot2)
ggplot(data = pc_scores, mapping = aes(x = PC1, y = PC2, color = rot)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) + geom_vline(xintercept  = 0)
loadings
cbind(df_std, pc_scores)
df_wine_drinkers
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'reticulate', 'RColorBrewer', 'ggforce', 'latex2exp', 'ggbrace', "ordr")
libraries(packages)
knitr::opts_chunk$set(comment = NA, echo = TRUE, eval = TRUE, warning = FALSE, message=FALSE)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#create and use conda environment
#conda_create(envname = 'blog_posts',  python_version = '3.10.11')
use_condaenv(condaenv = 'blog_posts')
reticulate::repl_python()
#install packages in conda environment
#py_packages <- c('numpy', 'pandas', 'scikit-learn', "plotnine", "statsmodels", "smltheory")
#conda_install(envname = 'blog_posts', packages = 'manim', pip=T)
#install_tensorflow(method = 'conda', envname = 'blog_posts')#can take long time (~10 minutes)
#useful for checking what packages are loaded
#py_list_packages(envname = 'blog_posts', type = 'conda')
#pandoc content/technical_content/understanding_ML/refs.bib -t csljson -o content/technical_content/understanding_ML/refs.json
reticulate::repl_python()
