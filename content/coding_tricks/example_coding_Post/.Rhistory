#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'RColorBrewer', 'parallel', 'data.table', 'kableExtra', 'ggtext', 'egg', 'papaja', 'shiny',
'ggbrace', 'cowplot', 'knitr', 'RefManageR', 'reticulate', 'gluedown', 'formatR')
libraries(packages)
#use_python(python = "/usr/local/bin/python3.9")
knitr::opts_chunk$set(comment = NA)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
compute_binom_mass_density <- function(num_trials, prob_success, num_successes){
#computation of binomial term (i.e., number of ways of obtaining a given number of successes)
num_success_patterns <- (factorial(num_trials)/(factorial(num_successes)*factorial(num_trials-num_successes)))
#computation of the number of possible ways of obtaining a given number of successes (i.e., heads)
prob_single_pattern <- (prob_success)^num_successes*(1-prob_success)^(num_trials-num_successes)
probability <- num_success_patterns*prob_single_pattern
pmf_df <- data.frame('probability' = probability,
'num_successes' = num_successes,
'prob_success' = prob_success,
'num_trials' = num_trials)
return(pmf_df)
}
num_trials <- 10
num_successes <- 7
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_probability_density(num_trials, prob_success, num_successes)
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
ggplot(data = likelihood_distribution, aes(x = prob_success, y = probability)) +
geom_line() +
scale_y_continuous(name = bquote(paste(L, "(", theta[1], " | ", theta[2] == .(num_trials), ", ", y, ")"))) +
scale_x_continuous(name = bquote(paste("Probability of success (", theta, ")")), breaks = seq(0, 1, 0.1)) +
theme_classic()
num_trials <- 10
num_successes <- 7
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
likelihood_distribution
0.000000e+00
sum(likelihood_distribution$probability)
num_trials <- 10
num_successes <- 1
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
sum(likelihood_distribution$probability)
um_trials <- 10
num_successes <- 0
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
num_trials <- 10
num_successes <- 0
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials,num_successes =  num_successes, prob_success = prob_success)
ggplot(data = likelihood_distribution, aes(x = prob_success, y = probability)) +
geom_line() +
scale_y_continuous(name = bquote(paste(L, "(", theta[1], " | ", theta[2] == .(num_trials), ", ", y, ")"))) +
scale_x_continuous(name = bquote(paste("Probability of success (", theta, ")")), breaks = seq(0, 1, 0.1)) +
theme_classic()
num_trials <- 7:100
num_successes <- 7
prob_success <- 0.5 #manipulated variable
likelihood_distribution <- compute_binom_probability_density(num_trials, prob_success, num_successes)
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials,num_successes =  num_successes, prob_success = prob_success)
ggplot(data = likelihood_distribution, aes(x = prob_success, y = probability)) +
geom_line() +
scale_y_continuous(name = bquote(paste(L, "(", theta[1], " | ", theta[2] == .(num_trials), ", ", y, ")"))) +
scale_x_continuous(name = bquote(paste("Probability of success (", theta, ")")), breaks = seq(0, 1, 0.1)) +
theme_classic()
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials, num_successes =  num_successes, prob_success = prob_success)
likelihood_distribution
num_trials <- 10
num_successes <- 5
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials, num_successes =  num_successes, prob_success = prob_success)
sum(likelihood_distribution$probability)
num_trials <- 10
num_successes <- 0
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials, num_successes =  num_successes, prob_success = prob_success)
sum(likelihood_distribution$probability)
num_trials <- 10
num_successes <- 10
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials = num_trials, num_successes =  num_successes, prob_success = prob_success)
sum(likelihood_distribution$probability)
.6*.3
0.18+.09+.09
# Define the observed sequence of flips
x <- c("H", "T", "T", "H", "H", "T", "H", "T", "T", "H")
# Define a range of values for p
p <- seq(0, 1, by=0.01)
# Compute the likelihood function for the observed data
L <- prod(p^sum(x=="H") * (1-p)^sum(x=="T"))
# Compute the constant K
K <- choose(10, 5)
# Compute the probability density function for the observed data
P <- K * p^sum(x=="H") * (1-p)^sum(x=="T")
# Plot the likelihood function and the probability density function
plot(p, L * P, type="l", lty=2, xlab="p", ylab="Likelihood * Density")
lines(p, P, type="l", lwd=2, col="red")
L
# Define a range of values for p
p <- seq(0, 1, by=0.01)
prod(p^sum(x=="H") * (1-p)^sum(x=="T"))
num_trials <- 10
num_successes <- 7
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
compute_binom_mass_density(num_trials, prob_success, num_successes)
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
ggplot(data = likelihood_distribution, aes(x = prob_success, y = probability)) +
geom_line() +
scale_y_continuous(name = bquote(paste(L, "(", theta[1], " | ", theta[2] == .(num_trials), ", ", y, ")"))) +
scale_x_continuous(name = bquote(paste("Probability of success (", theta, ")")), breaks = seq(0, 1, 0.1)) +
theme_classic()
likelihood_distribution$probability / prob_distribution$probability
prob_distribution$probabil
prob_distribution$probability
likelihood_distribution$probability
likelihood_distribution$probability[50]
prob_distribution$probability
likelihood_distribution[51]
likelihood_distribution[ ,51]
likelihood_distribution[ ,51]
likelihood_distribution[ ,51]
likelihood_distribution
likelihood_distribution[ 51,]
prob_distribution$probability
num_trials <- 20
num_successes <- 14
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
compute_binom_mass_density(num_trials, prob_success, num_successes)
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
likelihood_distribution[ 51,]
prob_distribution$probability
0.03696442/0.1171875000
num_trials <- 30
num_successes <- 21
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
compute_binom_mass_density(num_trials, prob_success, num_successes)
num_trials <- 30
num_successes <- 21
prob_success <- seq(from = 0, to = 1, by = 0.01) #manipulated variable
likelihood_distribution <- compute_binom_mass_density(num_trials, prob_success, num_successes)
likelihood_distribution[ 51,]
prob_distribution$probability
0.01332457/0.1171875000
likelihood_distribution[ 51,]
0.01332457/0.1171875000
0.03696442/0.1171875000
p <- 0.50
likelihood <- p^6 * (1-p)^4
likelihood
p <- seq(from = 0, to = 1.00, by = 0.01)
likelihood <- p^6 * (1-p)^4
likelihood
sum(likelihood)
sum(likelihood)*210
p <- seq(from = 0, to = 1.00, by = 0.001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)
sum(likelihood)*210
p <- seq(from = 0, to = 1.00, by = 0.001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.00001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.0001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.000001)
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.0000001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.000001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
p <- seq(from = 0, to = 1.00, by = 0.00001)
likelihood <- p^6 * (1-p)^4
sum(likelihood)*0.003968254
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'RColorBrewer', 'parallel', 'data.table', 'kableExtra', 'ggtext', 'egg', 'shiny',
'knitr', 'RefManageR', 'gluedown', 'formatR', 'reticulate')
libraries(packages)
knitr::opts_chunk$set(comment = NA, echo = TRUE, eval = TRUE, warning = FALSE)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#install_miniconda(path = "e:/miniconda", update = T)
use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/bin/conda")
#py_packages <- c('numpy', 'pandas', 'scipy')
#py_install(packages = py_packages)
reticulate::repl_python()
#install_miniconda(path = "e:/miniconda", update = T)
use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/bin/conda")
#install_miniconda(path = "e:/miniconda", update = T)
use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/bin/conda")
reticulate::repl_python()
incomplete_data_like <- py$incomplete_data_like
lower_bound <- py$lower_bound_df
lower_bound_2 <- py$lower_bound_df_2
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bound, mapping = aes(x = p1, y = likelihood), linewidth = 0.5) +
geom_line(inherit.aes = F, data = lower_bound_2, mapping = aes(x = p1, y = likelihood), linewidth = 0.5) +
scale_x_continuous(breaks = seq(from = 0, to = 1, by = 0.1)) +
theme_classic(base_family = 'Helvetica')
reticulate::repl_python()
library(kableExtra)
#import dataframes from Python
heads_df <- round(x = py$eff_number_heads, digits = 1)
tails_df <- round(x = py$eff_number_tails, digits = 1)
#join dataframes and include additional information that is contained in figure table
effective_number_data <- data.frame('Coin A' = paste0("$\\approx$ ", heads_df$coin_A, " H, ", tails_df$coin_A, " T"),
'Coin B' = paste0("$\\approx$ ", heads_df$coin_B, " H, ", tails_df$coin_B, " T"),
check.names = F)
effective_number_data
kbl(x = effective_number_data, format = 'html', digits = 2, booktabs = TRUE,
align = c('c', 'c'), escape = F,
#CSS styling
##make all borders white
table.attr = 'style="border-bottom: 1pt solid white"') %>%
##replace header bottom border with white one
row_spec(row = 0, extra_css = 'border-bottom: 1pt solid white; color: white ', bold= F)  %>%
row_spec(row = nrow(effective_number_data), background = 'white') %>%
#row colouring
column_spec(width = '3cm', column = 1, color = '#8F4944', background = first_col_colours) %>%
column_spec(width = '3cm',column = 2, color = '#476685', background = second_col_colours) %>%
#increase row heights
#footnote
footnote(general =  "<em>Note</em>. Table was recreated to resemble the table in Step 3 of Figure \\ref{fig:do-batzoglou}.",  threeparttable = T,  escape = F, general_title = ' ') %>%
#give table class name so that above CSS code is applied on it
kable_styling(htmltable_class = 'do_batzoglou_table', position = 'center', html_font = 'Arial')
#alternate row colouring
first_col_colours <- rep(x = c('#E8C3BE', '#F6E5E2'), length.out = nrow(effective_number_data))
second_col_colours <- rep(x = c('#C7D7E0', '#E5ECF0'), length.out = nrow(effective_number_data))
kbl(x = effective_number_data, format = 'html', digits = 2, booktabs = TRUE,
align = c('c', 'c'), escape = F,
#CSS styling
##make all borders white
table.attr = 'style="border-bottom: 1pt solid white"') %>%
##replace header bottom border with white one
row_spec(row = 0, extra_css = 'border-bottom: 1pt solid white; color: white ', bold= F)  %>%
row_spec(row = nrow(effective_number_data), background = 'white') %>%
#row colouring
column_spec(width = '3cm', column = 1, color = '#8F4944', background = first_col_colours) %>%
column_spec(width = '3cm',column = 2, color = '#476685', background = second_col_colours) %>%
#increase row heights
#footnote
footnote(general =  "<em>Note</em>. Table was recreated to resemble the table in Step 3 of Figure \\ref{fig:do-batzoglou}.",  threeparttable = T,  escape = F, general_title = ' ') %>%
#give table class name so that above CSS code is applied on it
kable_styling(htmltable_class = 'do_batzoglou_table', position = 'center', html_font = 'Arial')
#alternate row colouring
first_col_colours <- rep(x = c('#E8C3BE', '#F6E5E2'), length.out = nrow(effective_number_data) - 1)
second_col_colours <- rep(x = c('#C7D7E0', '#E5ECF0'), length.out = nrow(effective_number_data)- 1)
effective_number_data
kbl(x = effective_number_data, format = 'html', digits = 2, booktabs = TRUE,
align = c('c', 'c'), escape = F,
#CSS styling
##make all borders white
table.attr = 'style="border-bottom: 1pt solid white"') %>%
##replace header bottom border with white one
row_spec(row = 0, extra_css = 'border-bottom: 1pt solid white; color: white ', bold= F)  %>%
row_spec(row = nrow(effective_number_data), background = 'white') %>%
#row colouring
column_spec(width = '3cm', column = 1, color = '#8F4944', background = first_col_colours) %>%
column_spec(width = '3cm',column = 2, color = '#476685', background = second_col_colours) %>%
#increase row heights
#footnote
footnote(general =  "<em>Note</em>. Table was recreated to resemble the table in Step 3 of Figure \\ref{fig:do-batzoglou}.",  threeparttable = T,  escape = F, general_title = ' ') %>%
#give table class name so that above CSS code is applied on it
kable_styling(htmltable_class = 'do_batzoglou_table', position = 'center', html_font = 'Arial')
nrow(effective_number_data)
second_col_colours <- rep(x = c('#C7D7E0', '#E5ECF0'), length.out = nrow(effective_number_data))
#alternate row colouring
first_col_colours <- rep(x = c('#E8C3BE', '#F6E5E2'), length.out = nrow(effective_number_data) )
kbl(x = effective_number_data, format = 'html', digits = 2, booktabs = TRUE,
align = c('c', 'c'), escape = F,
caption = 'Effective Number of Heads and Tails for Each of Two Coins',
#CSS styling
##make all borders white
table.attr = 'style="border-bottom: 1pt solid white"') %>%
##replace header bottom border with white one
row_spec(row = 0, extra_css = 'border-bottom: 1pt solid white; color: white ', bold= F)  %>%
#row_spec(row = nrow(effective_number_data), background = 'white') %>%
#row colouring
column_spec(width = '3cm', column = 1, color = '#8F4944', background = first_col_colours) %>%
column_spec(width = '3cm',column = 2, color = '#476685', background = second_col_colours) %>%
#increase row heights
#footnote
footnote(general =  "<em>Note</em>. Table was recreated to resemble the table in Step 3 of Figure \\ref{fig:do-batzoglou}.",  threeparttable = T,  escape = F, general_title = ' ') %>%
#give table class name so that above CSS code is applied on it
kable_styling(htmltable_class = 'do_batzoglou_table', position = 'center', html_font = 'Arial')
effective_number_data
kbl(x = effective_number_data, format = 'html', digits = 2, booktabs = TRUE,
align = c('c', 'c'), escape = F,
caption = 'Effective Number of Heads and Tails for Each of Two Coins',
#CSS styling
##make all borders white
table.attr = 'style="border-bottom: 1pt solid white"') %>%
##replace header bottom border with white one
row_spec(row = 0, extra_css = 'border-bottom: 1pt solid white; color: white ', bold= F)  %>%
#row_spec(row = nrow(effective_number_data), background = 'white') %>%
#row colouring
column_spec(width = '3cm', column = 1, color = '#8F4944', background = first_col_colours) %>%
column_spec(width = '3cm',column = 2, color = '#476685', background = second_col_colours) %>%
#increase row heights
#footnote
footnote(general =  "<em>Note</em>. Table was recreated to resemble the table in Step 3 of Figure \\ref{fig:do-batzoglou}.",  threeparttable = T,  escape = F, general_title = ' ') %>%
#give table class name so that above CSS code is applied on it
kable_styling(htmltable_class = 'do_batzoglou_table', position = 'center', html_font = 'Arial')
kbl(x = effective_number_data, format = 'html', digits = 2, booktabs = TRUE,
align = c('c', 'c'), escape = F,
caption = 'Effective Number of Heads and Tails for Each of Two Coins',
#CSS styling
##make all borders white
table.attr = 'style="border-bottom: 1pt solid white"') %>%
##replace header bottom border with white one
row_spec(row = 0, extra_css = 'border-bottom: 1pt solid white; color: white ', bold= F)  %>%
row_spec(row = nrow(effective_number_data), background = 'white') %>%
#row colouring
column_spec(width = '3cm', column = 1, color = '#8F4944', background = first_col_colours) %>%
column_spec(width = '3cm',column = 2, color = '#476685', background = second_col_colours) %>%
#increase row heights
#footnote
footnote(general =  "<em>Note</em>. Table was recreated to resemble the table in Step 3 of Figure \\ref{fig:do-batzoglou}.",  threeparttable = T,  escape = F, general_title = ' ') %>%
#give table class name so that above CSS code is applied on it
kable_styling(htmltable_class = 'do_batzoglou_table', position = 'center', html_font = 'Arial')
kbl(x = effective_number_data, format = 'html', digits = 2, booktabs = TRUE,
align = c('c', 'c'), escape = F,
caption = 'Effective Number of Heads and Tails for Each of Two Coins',
#CSS styling
##make all borders white
table.attr = 'style="border-bottom: 1pt solid white"') %>%
##replace header bottom border with white one
row_spec(row = 0, extra_css = 'border-bottom: 1pt solid white; color: white ', bold= F)  %>%
row_spec(row = nrow(effective_number_data), background = 'white') %>%
#row colouring
column_spec(width = '3cm', column = 1, color = '#8F4944', background = first_col_colours) %>%
column_spec(width = '3cm',column = 2, color = '#476685', background = second_col_colours) %>%
#increase row heights
#footnote
footnote(general =  "<em>Note</em>. Table was recreated to resemble the table in Step 3 of Figure \\ref{fig:do-batzoglou}.",  threeparttable = T,  escape = F, general_title = ' ') %>%
#give table class name so that above CSS code is applied on it
kable_styling(htmltable_class = 'do_batzoglou_table', position = 'center', html_font = 'Arial')
kbl(x = effective_number_data, format = 'html', digits = 2, booktabs = TRUE,
align = c('c', 'c'), escape = F,
caption = 'Effective Number of Heads and Tails for Each of Two Coins',
#CSS styling
##make all borders white
table.attr = 'style="border-bottom: 1pt solid white"') %>%
##replace header bottom border with white one
row_spec(row = 0, extra_css = 'border-bottom: 1pt solid white; color: white ', bold= F)  %>%
#row colouring
column_spec(width = '3cm', column = 1, color = '#8F4944', background = first_col_colours) %>%
column_spec(width = '3cm',column = 2, color = '#476685', background = second_col_colours) %>%
row_spec(row = nrow(effective_number_data), background = 'white') %>%
#increase row heights
#footnote
footnote(general =  "<em>Note</em>. Table was recreated to resemble the table in Step 3 of Figure \\ref{fig:do-batzoglou}.",  threeparttable = T,  escape = F, general_title = ' ') %>%
#give table class name so that above CSS code is applied on it
kable_styling(htmltable_class = 'do_batzoglou_table', position = 'center', html_font = 'Arial')
reticulate::repl_python()
py_install(packages = 'mod')
reticulate::repl_python()
py_install(packages = 'matplotlib')
reticulate::repl_python()
#py_install(packages = 'pandas')
use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/bin/conda")
#py_install(packages = 'pandas')
#use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/bin/conda")
use_python("/usr/local/bin/python")
#py_install(packages = 'pandas')
use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/envs/r-reticulate/bin/python")
use_python("/Users/sebastiansciarra/Library/r-miniconda/envs/r-reticulate/bin/python")
#conda_remove(envname = 'r-reticulate', packages = 'matplotlib')
py_config()
use_python("/usr/local/bin/python3")
#py_install(packages = 'pandas')
#use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/bin/conda")
use_python("/usr/local/bin/python3")
py_install(packages = 'pandas')
reticulate::repl_python()
py_config()
#load packages
library(easypackages)
packages <- c('devtools','tidyverse', 'RColorBrewer', 'parallel', 'data.table', 'kableExtra', 'ggtext', 'egg', 'shiny',
'knitr', 'RefManageR', 'gluedown', 'formatR', 'reticulate')
libraries(packages)
#use_python(python = "/usr/local/bin/python3.9")
knitr::opts_chunk$set(comment = NA, echo = TRUE, eval = TRUE, warning = FALSE)
# knitr hook to use Hugo highlighting options
knitr::knit_hooks$set(
source = function(x, options) {
hlopts <- options$hlopts
paste0(
"```", "r ",
if (!is.null(hlopts)) {
paste0("{",
glue::glue_collapse(
glue::glue('{names(hlopts)}={hlopts}'),
sep = ","
), "}"
)
},
"\n", glue::glue_collapse(x, sep = "\n"), "\n```\n"
)
}
)
chunk_class <- function(before, options, envir) {
class_name = options$class_name
if (!is.null(before)) {
lines <- unlist(strsplit(x = before, split = "\n")) #separate lines of code at \n
n <- length(lines)  #determines numbers of lines
#if (line_numbers) {
res <- paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#py_install(packages = 'pandas')
#use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/bin/conda")
use_python("/usr/local/bin/python3")
#py_install(packages = 'pandas')
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
#conda_remove(envname = 'r-reticulate', packages = 'matplotlib')
reticulate::repl_python()
#py_install(packages = 'pandas')
#use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/bin/conda")
use_python("/usr/local/bin/python3")
py_install(packages = 'pandas')
reticulate::repl_python()
