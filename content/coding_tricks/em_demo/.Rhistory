#paste0("<pre><code class='", class_name, "'>", before, "</code></pre>")
#}
#res <- paste0("<pre>", paste0("<span class='line-number'>", 1:n,
#"</span><code class ='", class_name, "'>", lines, "</code>"), "</pre>")
}
return(res)
}
knitr::knit_hooks$set(output = chunk_class, preserve = TRUE)
#knitr::knit_hooks$set(output = function(x, options) {
#  paste(c("<pre><code class = 'r-code'>",
#        gsub('^## Error', '**Error**', x),
#        '</pre></code>'), collapse = '\n')
#})
options(reticulate.autocomplete = TRUE)
#install_miniconda(path = "e:/miniconda", update = T)
use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/bin/conda")
#py_packages <- c('numpy', 'pandas', 'scipy')
#py_install(packages = py_packages)
reticulate::repl_python()
#install_miniconda(path = "e:/miniconda", update = T)
use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/bin/conda")
#install_miniconda(path = "e:/miniconda", update = T)
use_condaenv(condaenv = "r-reticulate", conda = "/Users/sebastiansciarra/Library/r-miniconda/bin/conda")
reticulate::repl_python()
incomplete_data_like <- py$incomplete_data_like
lower_bound <- py$lower_bound_df
lower_bound_2 <- py$lower_bound_df_2
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bound, mapping = aes(x = p1, y = likelihood), linewidth = 0.5) +
geom_line(inherit.aes = F, data = lower_bound_2, mapping = aes(x = p1, y = likelihood), linewidth = 0.5) +
scale_x_continuous(breaks = seq(from = 0, to = 1, by = 0.1)) +
theme_classic(base_family = 'Helvetica')
reticulate::repl_python()
incomplete_data_like <- py$incomplete_data_like
old_lower_bound <- py$old_lower_bound
new_lower_bound <- py$new_lower_bound
#combine old and new lower bounds data sets and introduce factor variable to track old/new status
lower_bounds_df <- bind_rows(
#data.frame(old_lower_bound, iteration = "old"),
data.frame(new_lower_bound, iteration = "new")) %>%
mutate(iteration = as.factor(iteration))
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#axis details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
theme_classic(base_family = 'Helvetica')
incomplete_data_like <- py$incomplete_data_like
old_lower_bound <- py$old_lower_bound
new_lower_bound <- py$new_lower_bound
#combine old and new lower bounds data sets and introduce factor variable to track old/new status
lower_bounds_df <- bind_rows(
data.frame(old_lower_bound, iteration = "old"),
data.frame(new_lower_bound, iteration = "new")) %>%
mutate(iteration = as.factor(iteration))
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#axis details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
theme_classic(base_family = 'Helvetica')
RColorBrewer::brewer.pal(4, "Blues")
RColorBrewer::brewer.pal(8, "Blues")
library(RColorBrewer)
display.brewer.pal(brewer.pal(8, "Blues"))
display.brewer.pal(n = 8, name = 'blues')
display.brewer.pal(n = 8, name = 'Blues')
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_discrete(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
theme_classic(base_family = 'Helvetica')
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
theme_classic(base_family = 'Helvetica')
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
labs(color = 'Lower bound') +
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
reticulate::repl_python()
old_p_value <- py$p[0]
old_p_value
py$p
old_p_value <- py$p[0]
old_p_value
old_p_value <- py$p[1]
old_p_value
old_p_value <- py$estimates$p_new[1]
new_p_value <- py$estimates$p_new[1]
new_p_value
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
#vertical dashed lines
geom_vline(xintercept = old_p_value, linetype = 2) +
labs(color = 'Lower bound') +
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
old_p_value <- py$p[1]
old_p_value
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
#vertical dashed lines
geom_vline(xintercept = old_p_value, linetype = 2) +
labs(color = 'Lower bound') +
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
old_intersection <- py$compute_lower_bound(responsibilities = py$rs_old,
mu = py$mu_fixed,
p = py$p)
old_intersection
##old lower bound and value where it intersects incomplete-data log-likelihood
old_p_value <- py$p[1]
old_intersection <- py$compute_lower_bound(responsibilities = py$rs_old,
mu = py$mu_fixed,
p = old_p_value)
##old lower bound and value where it intersects incomplete-data log-likelihood
new_p_value <- py$estimates$p_new[1]
new_intersection <- py$compute_lower_bound(responsibilities = py$rs_new,
mu = py$mu_fixed,
p = new_p_value)
new_intersection
##vertical line data set
intersection_data <- data.frame('p1_value' = c(old_p_value, new_p_value),
'y_min' = c(-20, -20),
'intersection_point' = c(old_intersection, new_intersection))
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis & legend details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
labs(color = 'Lower bound') +
#vertical dashed lines
geom_segment(data = intersection_data,
x = p1_value, y = y_min, xend = p1_value, , yend = intersection_point,
linetype = 2) +
#other aesthetics
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
##vertical line data set
intersection_data <- data.frame('p1_value' = c(old_p_value, new_p_value),
'y_min' = c(-20, -20),
'intersection_point' = c(old_intersection, new_intersection))
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis & legend details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
labs(color = 'Lower bound') +
#vertical dashed lines
geom_segment(data = intersection_data,
x = p1_value, y = y_min, xend = p1_value, , yend = intersection_point,
linetype = 2) +
#other aesthetics
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
intersection_data
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis & legend details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
labs(color = 'Lower bound') +
#vertical dashed lines
geom_segment(data = intersection_data,
x = 'p1_value', y = 'y_min', xend = 'p1_value', , yend = 'intersection_point',
linetype = 2) +
#other aesthetics
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis & legend details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
labs(color = 'Lower bound') +
#vertical dashed lines
geom_segment(data = intersection_data,
x = p1_value, y = y_min, xend = p1_value, , yend = intersection_point,
linetype = 2) +
#other aesthetics
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis & legend details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
labs(color = 'Lower bound') +
#vertical dashed lines
geom_segment(data = intersection_data,
x = p1_value, y = y_min, xend = p1_value, yend = intersection_point,
linetype = 2) +
#other aesthetics
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis & legend details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
labs(color = 'Lower bound') +
#vertical dashed lines
geom_segment(data = intersection_data,
x = 'p1_value', y = 'y_min', xend = 'p1_value', yend = 'intersection_point',
linetype = 2) +
#other aesthetics
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis & legend details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
labs(color = 'Lower bound') +
#vertical dashed lines
geom_segment(data = intersection_data,
mapping = aes(x = 'p1_value', y = 'y_min', xend = 'p1_value', yend = 'intersection_point'),
linetype = 2) +
#other aesthetics
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
intersection_data
glimpse(intersection_data)
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis & legend details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
labs(color = 'Lower bound') +
#vertical dashed lines
#geom_segment(data = intersection_data,
#             mapping = aes(x = 'p1_value', y = 'y_min', xend = 'p1_value', yend = 'intersection_point'),
#             linetype = 2) +
#
#other aesthetics
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis & legend details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5)) +
labs(color = 'Lower bound') +
#vertical dashed lines
geom_segment(data = intersection_data,
mapping = aes(x = p1_value, y = y_min, xend = p1_value, yend = intersection_point),
linetype = 2) +
#other aesthetics
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
new_intersection
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis & legend details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5),
expand = c(0, 0)) +
labs(color = 'Lower bound') +
#vertical dashed lines
geom_segment(data = intersection_data,
mapping = aes(x = p1_value, y = y_min, xend = p1_value, yend = intersection_point),
linetype = 2) +
#other aesthetics
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
ggplot(data = incomplete_data_like, mapping = aes(x = p1, y = likelihood)) +
#lines
geom_line(linewidth = 1) +
geom_line(inherit.aes = F, data = lower_bounds_df,
mapping = aes(x = p1, y = likelihood, group = iteration, color = iteration),
linewidth = 0.5) +
#colour details
scale_color_manual(values = c('old' ='#9ECAE1', 'new' =  '#2171B5')) +
#axis & legend details
scale_x_continuous(name = expression(Coin~1~Probability~(p[1]*';'~p[2]~'= 0.10')),
breaks = seq(from = 0, to = 1, by = 0.1),
labels = sprintf("%0.2f", seq(from = 0, to = 1, by = 0.1))) +
scale_y_continuous(name = expression('Incomplete-Data Log-Likelihood, L('*bold("\u03B8")*'|'*bold(x)*')'),
limits = c(-20, -5),
expand = c(0, 0)) +
labs(color = 'Lower bound') +
#vertical dashed lines
geom_segment(data = intersection_data,
mapping = aes(x = p1_value, y = y_min, xend = p1_value, yend = intersection_point),
linetype = 1) +
#other aesthetics
theme_classic(base_family = 'Helvetica') +
theme(text = element_text(color = "#002241"),
axis.line = element_line(color = "#002241"),
axis.ticks = element_line(color =  "#002241"),
axis.text = element_text(color = "#002241"))
reticulate::repl_python()
